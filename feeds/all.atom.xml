<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>README.txt</title><link href="http://hernantz.github.io/" rel="alternate"></link><link href="http://hernantz.github.io/feeds/all.atom.xml" rel="self"></link><id>http://hernantz.github.io/</id><updated>2020-03-27T00:00:00-03:00</updated><subtitle>- Mostly lies and rants in plain text.</subtitle><entry><title>Childe Roland to the Dark Tower came</title><link href="http://hernantz.github.io/childe-roland-to-the-dark-tower-came.html" rel="alternate"></link><published>2020-03-27T00:00:00-03:00</published><updated>2020-03-27T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2020-03-27:/childe-roland-to-the-dark-tower-came.html</id><summary type="html">&lt;p&gt;My attempt to fixing the Dark Tower series.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Roland and the Dark Tower" src="/images/the-dark-tower.jpg" title="Roland and the Dark Tower" /&gt;&lt;/p&gt;
&lt;p&gt;I tend to be very critic with the movies and books I consume. And, if the ideas
behind them are any good, I get hooked and start to think of ways they could be
improved.&lt;/p&gt;
&lt;p&gt;Since many people tend to canalize this spark in some form of fan-fiction, I
figured, why not do the same?&lt;/p&gt;
&lt;p&gt;In this case I'll write about the Dark Tower book series, which I read a long
time ago.&lt;/p&gt;
&lt;p&gt;In my opinion, Stephen King's magnum opus ended up being too ambitious. I think
he felt this urge to finish it somehow, after the accident of course, and the
fact that he was sober didn't help his inspiration either.&lt;/p&gt;
&lt;p&gt;To my liking, not many people disagree with me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] Wolves of the Calla, Song Of Susannah (UGH!) and this, The Dark Tower. They
all seem to have been written in a rush after King's brush with mortality
when he was hit by that van. What a waste of all the great material he had to
work with. If I was rating the first four books, my review would have been
five stars. Unfortunately...&lt;/p&gt;
&lt;p&gt;Hated the way the vast world of the gunslinger kept getting smaller, with
constant trips back to good old New York, to dabble in real estate and
investing in Microsoft. Real friggin' epic. [...]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.goodreads.com/review/show/3920288?book_show_action=true&amp;amp;from_review_page=1"&gt;A Goodreads review&lt;/a&gt; by Thomas&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="my-attempt-at-fixing-everything"&gt;My attempt at fixing everything&lt;a class="headerlink" href="#my-attempt-at-fixing-everything" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I loved the first and second books as is, they are brilliant, you can almost
feel the effect of Stephen's high state of mind, high... get it? The Waste
Lands is where the story starts to deteriorate. I would have never resurrected
Jake and I would forget about the whole idea of 19, The Wizard of Oz, Ka-tet
Corp, Angul Siento, Calvin Tower, Mordred and Dixie Pig. This all could have
been great material for a sequel of Salem's Lot, but here it felt weird.&lt;/p&gt;
&lt;p&gt;This is how I would mix and re-organize the world of the Dark Tower, based
entirely on content from the series.&lt;/p&gt;
&lt;h3 id="1-the-gunslinger"&gt;1. The gunslinger&lt;a class="headerlink" href="#1-the-gunslinger" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First edition of course, stays almost intact, with some tweaks though. &lt;/p&gt;
&lt;p&gt;The town folk, rallied by the preacher woman, has beaten and raped the
bartender girl.  She begs Roland to kill her. O Discordia! she screams before
getting a headshot. &lt;/p&gt;
&lt;p&gt;The Man in Black also mentions the reasons behind following the Crimson King:
&lt;em&gt;"You think that John Farson or I are on the wrong side. But what makes you
believe you are on the right one?  The Crimson King might have gone mad and
recluded in the Tower, his ways are mysterious, yes. But that doesn't affect my
reason to be on his cause. The problem with this whole good &amp;amp; bad thing is that
chaos is not evil any more then order is good. Balance between chaos and order
is necessary. With no chaos nothing would ever change or be created. Without
order nothing could ever thrive once it is created. Conflict forces change and
change is how progress happens. Sometimes in order to create, one must first
destroy. The Crimson King is starting a revolution, and for it to succeed, the
Tower must fall!"&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="2-the-drawing-of-the-three"&gt;2. The drawing of the three&lt;a class="headerlink" href="#2-the-drawing-of-the-three" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pretty much stays intact too. When Roland looses his fingers laments with O
Discordia! He doesn't prevent Jack Mort from killing Jake. &lt;em&gt;Roland killed him
twice&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="3-wizard-and-glass"&gt;3. Wizard and glass&lt;a class="headerlink" href="#3-wizard-and-glass" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We learn about Roland's youth story at Mejis.&lt;/p&gt;
&lt;p&gt;Roland sees Susan die in the Wizard's glass and is devastated, blaming himself
for her death, O Discordia! When the ka-tet returns from Mejis, they bring the
Grapefruit orb and a kid with them, Bill, who is now an orphan because of the
Big Coffin Hunters killed his parents.&lt;/p&gt;
&lt;p&gt;After Gabrielle Deschain's matricide, Roland and Jamie travel to Serenity,
where the sisters that run the place agree to adopt young Bill. They also give
Roland a note written by his mother during her stay in there. In this note, his
mother reveals that Marten has predicted that Roland will one day kill her.
Although this has caused her to slowly lose her sanity, in the end she forgives
Roland and asks that he forgive her infidelity to his father and betrayal of
Gilead in return.She also warns him: &lt;em&gt;"Be careful my boy. Some enemies don't
have weapons, but words. And words are sometimes deadlier."&lt;/em&gt; Roland never talks
about this with his father.&lt;/p&gt;
&lt;h3 id="3-wolves-of-calla"&gt;3. Wolves of Calla&lt;a class="headerlink" href="#3-wolves-of-calla" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oy joins the ka-tet.&lt;/p&gt;
&lt;p&gt;They find Calla (the far end of their known Mid-World) after chasing someone
who was visiting the North Central Positronics Dogan.&lt;/p&gt;
&lt;p&gt;The Dogan becomes the standard metaphor for the internal workings of the brain of
the ka-tet and Mia's possession.&lt;/p&gt;
&lt;p&gt;There is a door they cannot open with the Crimson's King eye graffited.&lt;/p&gt;
&lt;p&gt;They are later introduced to the town folk, dance the Commalah, etc.&lt;/p&gt;
&lt;p&gt;The kat-tet receives Black Thirteen from the cult that worshiped doors, the
Mannis. Eddie sees Roland's past in it and how he will betray them for the
Tower. Roland sees all the ones he left behind because of his quest, Sussanah
who can hold many personalities gets possessed by Mia, a demon from the Prim
that inhabited inside the orb, that now starts to grow in her and wants the to
steal the orb, reach for the tower and free all the creatures that inhabitat
the Prim.&lt;/p&gt;
&lt;p&gt;We understand why Roland is how he is, and why he wants to set the Tower aside
to help this town, to redeem himself. His determination for the tower is
succumbing now, he feels guilty, he is not as cold-hearted as he once was.&lt;/p&gt;
&lt;p&gt;Jake's death would be Roland's secret to this
ka-tet, and that's hunting him, giving him nightmares, he tells no one but
Talitha, the matriarch of the town, during the sessions where she helped him
with his arthritis. She also makes Andy, her robotic personal assistant, fond
of telling horoscopes, promise that will help Roland in times of need.&lt;/p&gt;
&lt;p&gt;She dies of age, but gives Roland possession of her cross to lay at the Tower.
At her burial Andy says O Discordia!&lt;/p&gt;
&lt;p&gt;The ka-tet finds out that has been keeping secrets from each other, and Black
Thirteen is the culprit, so they reconcile and share mind (like the Dogan
metaphor that will later be used to defeat the wolves).&lt;/p&gt;
&lt;p&gt;Eddie gets knighted as a gunslinger, after receiving Roland's training and
martial knowledge. Sussanah becomes a sister of Oriza — women mustn't bear
guns.&lt;/p&gt;
&lt;h3 id="4-the-wind-through-the-keyhole"&gt;4. The wind through the keyhole&lt;a class="headerlink" href="#4-the-wind-through-the-keyhole" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Roland is hiding with the kids of Calla waiting for the wolves.&lt;/p&gt;
&lt;p&gt;Want to hear the story of the young gunslinger who slew a Werewolf? Asks the kids.&lt;/p&gt;
&lt;p&gt;He proceeds to tell a story within a story, beginning with the little sisters
of Eluria, when sister Jenna narrates him &lt;em&gt;the wind through the keyhole&lt;/em&gt; while
Roland is recovering at the hospital.&lt;/p&gt;
&lt;p&gt;The story is the same but the young boy slew a werewolf in the swamp instead of
encountering a dragon, with the gun and silver bullet that the Covenant Man
gives him. He is later slain by a dragon in the same swamp when he returns to
the enchanted forest looking to save a girl she wanted to marry. Although
Roland omits that part to the kids.&lt;/p&gt;
&lt;p&gt;Back in Calla, they defeat the wolves, many folks die, including children. They
notice that someone has given information to the wols. Eddie dies in this
fight, he was not true knight after all. His body is buried with his gun, and a
rose is planted in his grave like a gunslinger funeral. In front of all the new
graves, Roland gives a speech, that ends with: O Discordia! The Tower demanded
another sacrifice, now Roland is determined to end this curse. Ka is a wheel,
and again, for saving the day, he must pay with blood of his loved ones, and
looses his ka-tet again.&lt;/p&gt;
&lt;p&gt;They burn the jaw of the Man in Black, and ask the fire a question, the fire
answers with a vision of the traitor visiting the Dogan. The traitor did it so
that his daughters may survive. He begs for mercy before getting hanged. &lt;em&gt;I,
Roland Deschain of Gilead, son of Steven, last in the line of Eld, protector of
the Dark Tower, sentence you to die&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sussanah gets finally possessed and tries to murder the gunslinger, in the
fight manipulates Oy (again with the Dogan metaphor) to attack Roland, you
looses an eye.&lt;/p&gt;
&lt;p&gt;Roland shoots Oy who dies in his hands, it's last word is &lt;em&gt;Tower&lt;/em&gt;. He is left
with a big scar in his face and from now on he will wear an eye patch.&lt;/p&gt;
&lt;p&gt;Mia escapes with the orb, but gets caught by Andy and later exorcised by the
Mannis. With some remnants of magic and magnets they throw the demon through a
portal in the Doorway Cave to the Todash.&lt;/p&gt;
&lt;p&gt;After that Sussanah decides to stay at Calla as a sister of Oriza, since
Talitha had no descendants, the sisters will hold elections. It is not my Tower
Roland, I didn't ask for this, you must go on your own.&lt;/p&gt;
&lt;p&gt;The town folk complain that the Gunslinger intervention was for worse, more
people died, and now the town must be rebuilt. He is asked to leave and never
to come back. He is banished from Mid-World, his own world.&lt;/p&gt;
&lt;h3 id="5-the-waste-lands"&gt;5. The Waste lands&lt;a class="headerlink" href="#5-the-waste-lands" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Roland returns to the North Central Positronics Dogan, and with help of Andy,
opens the locked door. A terminal tells them about Lud, where the wolves
come from.&lt;/p&gt;
&lt;p&gt;That is where the beam starts. We learn a bit about the myth of the guardians.&lt;/p&gt;
&lt;p&gt;They leave to Outer-World with Black thirteen.&lt;/p&gt;
&lt;p&gt;In Lud, we enjoy all the post-apocalyptic cyberpunk goodness ala Mad Max,
graffitis of the Crimson King eye and some slow mutants too.&lt;/p&gt;
&lt;p&gt;We learn that gangs stole kids to give them to Dandelo, a minion of the Crimson King, who
roont them, a monster similar to IT.&lt;/p&gt;
&lt;p&gt;Dandelo feeds from emotions, so it is Andy the one that kills it by
self-destructing, saving Rolands life.&lt;/p&gt;
&lt;p&gt;Roland finds that there are good people still in this ruined world. The kids
that returned roont, were helped by some good folk (someone saved my life
tonight?).  When he kills one of the pubs in a confusing episode, someone says:
&lt;em&gt;you didn't have to kill him, it was his birthday today, O Discordia...&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Blain kills everyone and leaves following the path of the Beam.&lt;/p&gt;
&lt;h3 id="6-the-dark-tower"&gt;6. The Dark Tower&lt;a class="headerlink" href="#6-the-dark-tower" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Roland beats the train with a stupid riddle Curthbert once told him, at the
battle of Jerico hill. We learn a bit more about it, the fall of Gilead and
also the fate of Farson.&lt;/p&gt;
&lt;p&gt;After passing some of the worlds of other stories — the Tower is collapsing and
all the worlds are blending, Roland is left in the final stop, Keystone
Station, the door to the Dark Tower, the only one in All-World. The old ones
built this station and tried everything to open that portal, yet never
successfully.&lt;/p&gt;
&lt;p&gt;Blaine commits suicide.&lt;/p&gt;
&lt;p&gt;Black Thirteen &lt;em&gt;wakes up&lt;/em&gt;, starts to vibrate and with a deafening sound grows
and expands absorbing everything like a blackhole, including Roland. The
gunslinger has this vision of the rose that holds all the suns and all the
universes that Jake saw in NYC, and all the lovecroftian beings of the Prim in
between worlds. Wakes up in the crimson fields of Can'-Ka No Rey.&lt;/p&gt;
&lt;h2 id="my-alternative-ending"&gt;My alternative ending&lt;a class="headerlink" href="#my-alternative-ending" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once Roland reaches the Dark Tower, this is how I imagine the final encounter.
I put special attention to the opening line:&lt;/p&gt;
&lt;h3 id="i"&gt;I.&lt;a class="headerlink" href="#i" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Alone he was when he started his journey, and alone is how Roland reaches the
Dark Tower.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Tower is the apotheosis of all towers. It is sculpted from a single huge
stone. The monolith, black of course, is cracked. Some sort of dense fluid
comes out of the cracks. Blood of course. The Tower is bleeding. That blood
feeds the surrounding field of roses. The Tower is alive, but in agony, it's
roots are drying up.&lt;/p&gt;
&lt;p&gt;The entrance is a huge sandalwood door and depicts all the twelve guardians of
the beam engraved on it. A name in high speech is written on top — &lt;em&gt;Roland&lt;/em&gt;, of
course.&lt;/p&gt;
&lt;p&gt;Roland knows what to do. Leaves Talitha's cross in the floor and blows
Cuthbert's horn to open it. The crows resting on the top of the tower take
flight, scared by it's loud and deep sound. And the door opens, of course.&lt;/p&gt;
&lt;p&gt;The inside is void. There are no windows and no decorations on the walls. Only
spiraling steps lit by torches. A hundred? Or a thousand maybe? He begins to
climb.&lt;/p&gt;
&lt;p&gt;After a while, he takes some time to recover and realizes there are murals
carved on the walls. Murals that tell the origin of it all, strange figures and
symbols the Man in Black had shown him the long night they met. He keeps going.
More steps.&lt;/p&gt;
&lt;p&gt;There are lots of strange scenes shown in the walls too. He doesn't really know
what they represent or what they mean, but some are very notable. There is a
very creepy looking clown looking at him from some sort of drainage, twin
sisters at the end of a hallway full of doors, a strange looking rabid dog, a
huge black man behind bars, a man and a teenager dumping woman's body in a well
behind a barn, humanoid creatures but with the heads of animals. He keeps
climbing.&lt;/p&gt;
&lt;p&gt;To his surprise, the murals now tell The legend of Arthur Eld, the fall of
Gilead, and his life, Alain and Cuthbert, the battle at Jerico hill. More
steps. The lovely girl at the window — his true and only love Susan.&lt;/p&gt;
&lt;p&gt;He perceives distinctive smells, sounds, voices for each moment, each
conversation.&lt;/p&gt;
&lt;p&gt;Eluria, the Mohaine desert, Jake (Go then! There are other worlds than these),
the Man in Black — he shivers. The lobstrosities (Dad-a-chum? Dum-a-chum?) and
doors by the beach, Eddie, Sussanah, Talitha, Oy. Everyone is there. He then
closes his only eye as he speaks up the names of all his fallen friends and
loved ones.&lt;/p&gt;
&lt;p&gt;Outside, new roses appear in the field for every name. After all, every rose
that surrounds the Tower belongs to someone whose name has been spoken inside,
in this story or in another universe perhaps.&lt;/p&gt;
&lt;p&gt;More steps.&lt;/p&gt;
&lt;p&gt;It feels it's been a lifetime climbing. This thought clicked in his mind in a
weird way.&lt;/p&gt;
&lt;p&gt;More and more steps until he finally reaches the top.&lt;/p&gt;
&lt;p&gt;There is a bookcase full of books and a strange typing machine on a desk, with
a piece of yellow paper and a writing in low speech. &lt;em&gt;Alone he was when he
started his journey, and alone is how Roland reaches the Dark Tower.&lt;/em&gt; — he
reads, it makes no sense to him.&lt;/p&gt;
&lt;p&gt;There is a red door, with the same eye he has seen before, painted on top. The
eye of the Crimson King. The door is already opened and it leads to the
rooftop. &lt;/p&gt;
&lt;p&gt;He draws his weapons and goes up. &lt;/p&gt;
&lt;h3 id="ii"&gt;II.&lt;a class="headerlink" href="#ii" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The sunset has started. He sees the never ending sea of roses, laying under the
infinite shade casted by the Tower. The crows, black as the Tower, are back,
standing on the ledge.&lt;/p&gt;
&lt;p&gt;The Crimson King, is there, wearing glasses and dressed in a red robe.&lt;/p&gt;
&lt;p&gt;He is piling up black rocks, stacking them in what seems an impossible balance.&lt;/p&gt;
&lt;p&gt;He is seated next to a lit furnace. The furnace has bores with the silhouette
of the guardians. A greenish smoke comes out of it, with a familiar smell. Yes,
it's the devil's grass.&lt;/p&gt;
&lt;p&gt;When they make eye contact the pile crumbles — product of the distraction.&lt;/p&gt;
&lt;p&gt;The Crimson Kings looks at the guns and then back to Roland. Childe Roland to
the dark tower came! Long days and pleasant nights, Sai — says.&lt;/p&gt;
&lt;p&gt;Roland, not sure what how to respond, says nothing.&lt;/p&gt;
&lt;p&gt;You must be exhausted from your journey. So am I — adds with a smirk.&lt;/p&gt;
&lt;p&gt;What do you mean? Asked Roland.&lt;/p&gt;
&lt;p&gt;It's getting chilly, come, take a seat by the fire Roland, it's about time we
talked. We are going to have a clear starry night, it seems, how appropriate.&lt;/p&gt;
&lt;p&gt;Roland sits. First comes smiles, then lies. Last comes gunfire — says to
himself, as if preparing for the palaver to come.&lt;/p&gt;
&lt;p&gt;Anyways. Since I've thought about this moment for a long time, I decided it
would be best to choose my words very carefully, you deserve it.&lt;/p&gt;
&lt;p&gt;I wrote you a letter — says as he unfolds a piece of paper he took out from his
sleeve.&lt;/p&gt;
&lt;p&gt;The Crimson King clears his voice — Ready?&lt;/p&gt;
&lt;p&gt;Roland is mute.&lt;/p&gt;
&lt;p&gt;Dear Roland — begins to read out loud.&lt;/p&gt;
&lt;h3 id="iii"&gt;III.&lt;a class="headerlink" href="#iii" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I know why you came all this way for. You are looking for answers. But... each
answer leads to more questions. And when we think we have all the answers, the
questions change. So I'll give you something better instead. Redemption.&lt;/p&gt;
&lt;p&gt;You are not a bad person, nor a good one. And most importantly, you have not
forgotten the face of your father. In this level of the tower, I get to judge
that.&lt;/p&gt;
&lt;p&gt;You did well, better than I expected. And yes, it was worth it, all the blood
and tears. Your loved ones left behind, their names echoing in the Tower right
now, and everything your ever cared.&lt;/p&gt;
&lt;p&gt;All this sacrifice, your existence, was used to construct this tower. Every
door you have opened in your life, has been inside this place. It will
withstand the eons of time, and your story will prevail in it's murals, and in
other worlds too, Roland.&lt;/p&gt;
&lt;p&gt;The Crimson king takes a moment, a deep breath and continues.&lt;/p&gt;
&lt;p&gt;This Tower is also my prison. — exhales. It's been my obsession, a heavyweight
burden, and one of my most ambitious projects. One I though would never be able
to finish.&lt;/p&gt;
&lt;p&gt;We all have our Tower, our epic quest. You are part of mine, gunslinger.&lt;/p&gt;
&lt;p&gt;One grows fond of every character and story that tells. Each tale casts a
universe into existence, each one takes a peace of you, it feeds from your
imagination until it is alive. This process is a wonderful mystery and an
exhausting task.&lt;/p&gt;
&lt;p&gt;It's all in my mind, hunting me until I write it down, until it is born. You,
this tower, everything...&lt;/p&gt;
&lt;p&gt;I've put you through difficult situations, tried to stop you, time and time
again, but you stayed on track in your crusade. I made you that way, Roland.
Your road to the Tower is paved in blood. Mine is paved in ink. All roads are
different, because all towers are different. Yet we both had to walk them
together.&lt;/p&gt;
&lt;p&gt;We know it demands a lot of sacrifice, it might even mean our end, yet it is
our duty to keep going on, for that we are destined to find it and climb it's
steps. That is our redemption and we pay the price.&lt;/p&gt;
&lt;p&gt;I'm afraid all of this could fall apart at anytime. You don't get an idea how
close I've been to death, and with that, the end of this all. O Discordia! —
the The Crimson King laments.&lt;/p&gt;
&lt;p&gt;Would I risk destroying your world as well as the other worlds I have touched
with and drawn from my imagination? Would I risk it all?&lt;/p&gt;
&lt;p&gt;But if I have to be honest, it is not truly me who creates, you know. To peek
in Gan's novel does not make one Gan, although many creative people seem to
think so. No writer is Gan — no painter, no sculptor, no maker of music. We are
kas-ka Gan. The prophets of Gan.&lt;/p&gt;
&lt;p&gt;How does this all fit in the grand scheme of things? Where is the Tower of all
towers? What would the nature of such tower be? Who will wait for us atop?
Will anyone be there?&lt;/p&gt;
&lt;p&gt;That I don't ask... It might be... mmm... unwise.&lt;/p&gt;
&lt;p&gt;What matters is that this is your tower. You had to be here, gunslinger, it was
your inevitable destiny. It was very important for me that you made it.&lt;/p&gt;
&lt;p&gt;All things must come to an end, and this one story, your story and my role in
it, is no exception. It's time we say our goodbyes, Roland.&lt;/p&gt;
&lt;p&gt;I say thankya.&lt;/p&gt;
&lt;h3 id="iv"&gt;IV.&lt;a class="headerlink" href="#iv" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Crimson King looks at Roland, folds the letter again and throws it inside
the furnace. Millions of sparks ascend into the night sky.&lt;/p&gt;
&lt;p&gt;They both observe the constellations sprawling above in silence. All twelve
guardians are there, shinning brightly, perfectly aligned around the tower.
Polaris and the sword of Eld can easily be appreciated in all their splendor
too.&lt;/p&gt;
&lt;p&gt;The gunslinger, didn't like he just heard, it made him unease. Plain as he is
he cannot fully grasp the meaning of the letter. Shivers run through his spine.&lt;/p&gt;
&lt;p&gt;I know you are a bit overwhelmed now - says the Crimson King. Believe me, this
is not any easier for me either than it is for you. I don't know how much could
I bear if I were you. What universal truths would I have to swallow once I get
to my Tower.&lt;/p&gt;
&lt;p&gt;Back to silence.&lt;/p&gt;
&lt;p&gt;Both stare at the fire for what seemed a very long time. The furnace makes the
eyes of the curious crows shine in different colors. They have been hearing
everything, observing, waiting.&lt;/p&gt;
&lt;p&gt;Who are you? Asked Roland finally.&lt;/p&gt;
&lt;p&gt;I have many names, the Crimson King is one of them, it is how I'm known here.
But my real name is Stephen, Stephen King, see the pun? I'm a writer, a
puppeteer, the man behind the curtain — and gestures with his fingers as if
typing in the air.&lt;/p&gt;
&lt;p&gt;Roland simply stares back at him. He can't put words in his mouth. His mind is
working slowly. Irritated, like after three days of insomnia. He is suffering a
headache. He shivers. Perhaps is the weed, perhaps he has been enchanted,
perhaps he is inside a dream.&lt;/p&gt;
&lt;p&gt;You still don't get it, do you? I am your maker, Roland. Consider yourself
lucky. How many get that chance? I hadn't, yet... I hope...&lt;/p&gt;
&lt;p&gt;I know there's someone greater than me. There always is. Remember gunslinger,
the greatest mystery the Universe offers is not life but size. Size encompasses
life, and the Tower encompasses size.&lt;/p&gt;
&lt;p&gt;Size... Size... That word resonates inside Roland's head. He senses he is being
fooled, pushed to the edge of sanity. That headache doesn't let him think with
clarity. Some enemies don't have weapons, but words. And words are sometimes
deadlier. Worse than poison.&lt;/p&gt;
&lt;p&gt;Bullshit, you are a charlatan, that's what you are. Enough of this! — says
irritated. I want to hear no more.&lt;/p&gt;
&lt;p&gt;The Crimson King shrugs.&lt;/p&gt;
&lt;p&gt;First comes smiles, then lies... — Roland starts to say.&lt;/p&gt;
&lt;p&gt;Last comes gunfire... — the Crimson King interrupts. And nods, accepting the
deal. Death is nothing but another door.&lt;/p&gt;
&lt;p&gt;Tonight — the Crimson King continues — redemption and death are tied together.
Death, gunslinger, yet not for you.&lt;/p&gt;
&lt;p&gt;It is in your destiny to kill me. Do what you have to do. I will move on, I'm
mortal after all, you will soon find out.&lt;/p&gt;
&lt;p&gt;Just like that... What will happen after? — Roland asked.&lt;/p&gt;
&lt;p&gt;I'll let you be. And you will walk through that door waiting for you
downstairs. Where it leads it won't matter to me anymore, another tower
perhaps!&lt;/p&gt;
&lt;p&gt;What?! I though this was the Tower!&lt;/p&gt;
&lt;p&gt;Yeah, well... Ka is a wheel. It manifests as a cycle, but it is spiraling in
nature. Just like the steps of this tower. Seen from above it would appear you
were walking in circles, yet you were moving. See, one does not swim in the
same river twice. The river is no the same river, and you are not the same
person. You are not the same person you were one second ago and you won't be
the same person the next tower to reach.&lt;/p&gt;
&lt;p&gt;Roland is loosing it. That feeling frightens him. He needs to get back to firm
ground now. To who he is. To what he think is real.&lt;/p&gt;
&lt;p&gt;So... — the Crimson King stands up and walks up to the ledge of the Tower — I'm
ready whenever you are.&lt;/p&gt;
&lt;p&gt;Roland also stands up, and aims his heavy, ancient and deadly pistols at the
Crimson King.&lt;/p&gt;
&lt;p&gt;Oh.. Can I ask for one last whim? — the Crimson King asks.&lt;/p&gt;
&lt;p&gt;When this is over, please, say my name. Will ya? — says without waiting for an
answer.&lt;/p&gt;
&lt;p&gt;Fuck you! Fuck your Tower, fuck all of this! — the gunslinger yells. He fires
his guns empty at the Crimson King. The whole twelve rounds.&lt;/p&gt;
&lt;p&gt;Crows fly away with an alarmed cawing one more time. The creature that claimed
to be his creator trips and falls down. His red robe contrast with the pitch
black color of the Tower, it seems as if he was ablaze while falling, as the
first rays of dawn appear in the horizon.&lt;/p&gt;
&lt;h3 id="v"&gt;V&lt;a class="headerlink" href="#v" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Calmness slowly returns to Roland. As if the gunshots woke him up from a vivid
nightmare. No more poisonous words are infesting his mind. The smoke from the
pistols clears his thoughts and headache.&lt;/p&gt;
&lt;p&gt;But his mind still wonders.&lt;/p&gt;
&lt;p&gt;It is late to realize that he has been a minion of destiny, he has played his
part in some divine plan. He was indifferent to his people, instead of his
future. But that has been out of his control, hasn't it?&lt;/p&gt;
&lt;p&gt;A feeling emptiness fills his soul. This is the end of his world. He has other
place to go and no one is waiting for him.&lt;/p&gt;
&lt;p&gt;Stares at the sunrise for a while, it is beautiful, it is silent, peaceful. His
eye gets watery.&lt;/p&gt;
&lt;p&gt;Boys don't cry maggot! Hears Cort shout him in his mind, yet it echoes all over
the tower. That voice makes him smile. It is a sad smile though. When was the
last time he cried? Nobody is watching now. Nobody is there. They are all dead.
He allows himself to burst into tears. Tears that make the dark stone of the
Tower, even darker.&lt;/p&gt;
&lt;p&gt;After a while he is feeling replenished. Crying has an curious healing
properties for the soul. He downs his water flask and begins the descent.&lt;/p&gt;
&lt;h3 id="vi"&gt;VI&lt;a class="headerlink" href="#vi" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once at the base, he notices that the cracks in the walls are sealed. The Tower
seems to be healing.&lt;/p&gt;
&lt;p&gt;He also observes the remains of the Crimson King, who is being devoured by the
frantic crows, their eyes and beaks are red now. They don't get fed that often.
It is a horrible sight.&lt;/p&gt;
&lt;p&gt;Not long after, there is nothing but bones left. He kneels and grabs the skull.&lt;/p&gt;
&lt;p&gt;Is this a trick or are you truly dead? How many lies did you tell me? — says
Roland to it's hollow eyes.&lt;/p&gt;
&lt;p&gt;Just as he was told, there is a door right in front of the Tower.&lt;/p&gt;
&lt;p&gt;You were right about that at least... Stephen King... — puts the skull into his
bag.&lt;/p&gt;
&lt;p&gt;The door is a ghostwood door. This one has no names written on it, but a single
ancient rune, the rune of &lt;em&gt;Unknown&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;He gives the Tower one last glance and walks in. The door shuts, and vanishes.
A new rose blooms in the infinite crimson sea.&lt;/p&gt;
&lt;p&gt;The end.&lt;/p&gt;
&lt;h2 id="final-notes"&gt;Final notes&lt;a class="headerlink" href="#final-notes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you can see it is heavily inspired by the encounter with the Man in Black,
which I think was breathtaking. Both, the first and last book would finish in a
similar manner. Ka is a wheel. And yes! The Crimson King is Stephen King. Or a
part of his mind. The darkest part. We know that Marten did the same, he had
multiple personalities. King has also played around this idea that you don't
really know who you are sleeping with.&lt;/p&gt;
&lt;p&gt;I think the idea of meta-fiction was really interesting, but I didn't like how
King did it in the series. So I decided it would be best if it was used as a
surprise resource in the end. I know it's a mix of deus ex machina and an open
ending. But still feels like a worthy finale for an epic story.&lt;/p&gt;
&lt;p&gt;Also with this twist in the story I have remarked the main ideas that are
present throughout all the books, and all these ideas entangled with the
meaning of the Tower:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;O Discordia!&lt;/em&gt; phrase, that King said he heard in a dream.&lt;/li&gt;
&lt;li&gt;There are other worlds than these, many doors that lead to them, and death is
  nothing but another door.&lt;/li&gt;
&lt;li&gt;How &lt;em&gt;Ka&lt;/em&gt; is a wheel, that also moves.&lt;/li&gt;
&lt;li&gt;Size is the greatest mystery the Universe offers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The vast and complex universe created by King is composed of all his novels
together, tied around the Dark Tower. For me, he has accomplished his dream of
creating something comparable in complexity to Tolkien's work.&lt;/p&gt;</content><category term="Writings"></category><category term="reviews"></category><category term="rants"></category><category term="fan-fiction"></category></entry><entry><title>Privileged victimhood</title><link href="http://hernantz.github.io/privileged-victimhood.html" rel="alternate"></link><published>2020-02-10T00:00:00-03:00</published><updated>2020-02-10T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2020-02-10:/privileged-victimhood.html</id><summary type="html">&lt;p&gt;The dangers of identity politics and state imposed privileges.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;The Newtonian principle of gravitation is now more firmly established on the
basis of reason, that it would were the government to step in and to make it
an article of necessary faith. Reason and experiment have been indulged, and
error has fled before them. It is error alone which needs the support of
government. Truth can stand by itself.&lt;/p&gt;
&lt;p&gt;Thomas Jefferson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is nothing wrong with seeking privileges that generate inequality in your
favor. It is what every lobby or group does to improve their individual or
collective well-being, be that a better salary, more stability, less taxes,
less controls, free stuff, etc.&lt;/p&gt;
&lt;p&gt;Many times these privileges have an ideological justification behind with
certain factual basis, in which lobbyists believe for their right to impose
them, either because they are morally superior or, in the most common case,
victims oppressed by wars, patriarchy, slavery, segregation, inquisition,
conquests, poverty, labor exploitation, holocausts or dictatorships.&lt;/p&gt;
&lt;p&gt;Identity politics are on the raise these days and embrace these claims, under
lobby groups like union workers, LGBT, blacks, indigenous people, etc, where
your individuality is no longer defined by your ideas, abilities and efforts,
but by your race, sex, religion, salary, etc, which identifies and predetermine
your future based on the heritage of the collective you belong within.&lt;/p&gt;
&lt;p&gt;If these groups, through the free exchange of ideas, manage to convince others,
to obtain some privilege, that's not intrinsically bad. In the end, each one
does with his hard-earned money what he thinks best.&lt;/p&gt;
&lt;p&gt;Profiting from your suffering or alleged oppressed conditions is morally
debatable, but not forbidden. Gender-quotas, safe spaces, tuition-free
scholarships, etc are certainly plausible in a free society, so long as they
are practiced in the private sphere through mutually agreed contracts.&lt;/p&gt;
&lt;p&gt;If a certain university wants to facilitate the admission to ethnic minorities,
or if in a company, it is enough that any woman denounces harassment to
immediately result in your dismissal without prior trial, it is still your
choice to study in that university or work for that company.&lt;/p&gt;
&lt;p&gt;A less controversial example could be extended maternity leave, which might be
a way for a company to attract more valuable female workers, away from their
competition. This is a privilege that company can offer, that may or may not
work, but it is a risk that is contained within the walls of that organization.&lt;/p&gt;
&lt;p&gt;It is through tolerance of experimentation that a society can learn what ideas
work and which ones don't. Tolerance is a pillar of a free society, where there
are no artificial impediments for anyone to live according to their beliefs,
their sexuality, their biases or their ideology, and to run these kind of
experiments accordingly.&lt;/p&gt;
&lt;p&gt;Consider a case where a group of employees asks for free coffee at the office.
Nobody would claim that it is an inalienable human right, and it is an
obligation for the company to provide it. It's resolution is left as a private
affair. But in the case of identity politics, is a different story. The
privileges being demanded are not to be questioned. Of course they are not
referred to as privileges, but as social justice, historical compensations or
human rights instead. They are a public affair, thus making them prone to be
used as a platform by politicians to get to power and liberate the oppressed.&lt;/p&gt;
&lt;p&gt;The morality or effectiveness of these ideas should not be censored, but fought
with logical arguments and tested in real life. After all, opinions should also
compete in a market of ideas and speeches.&lt;/p&gt;
&lt;p&gt;A free exchange of ideas in a society (understood as a set of individuals) can
lead to results that are undesirable or, at least, questionable by certain
people. But it is in each persons's responsibility to analyze alternatives and
propose them in competition with those ideas that still govern society.&lt;/p&gt;
&lt;p&gt;The problem is whether those privileges are achieved through the repressive
power of the state. There, they are not the result of a voluntary transaction
between parties, but instead a violent imposition.&lt;/p&gt;
&lt;p&gt;To imply that the state must be in charge of imposing privileges is a very
dangerous idea. Like any public policy, it is difficult to anticipate its
effects, thus making that experiment much more risky for society as a whole.&lt;/p&gt;
&lt;p&gt;If you can assign privileges to a collective, you might as well attribute guilt
to it. Class conflicts, sexism, xenophobia, antisemitism, racism, cultural
wars, etc. are some of the possible consequences of trying to subject certain
groups to the ideology of others. Someday the tide can turn around and history
shows it doesn't end well.&lt;/p&gt;</content><category term="Politics"></category><category term="rants"></category><category term="ideas"></category><category term="libertarianism"></category></entry><entry><title>Configuration-friendly apps</title><link href="http://hernantz.github.io/configuration-friendly-apps.html" rel="alternate"></link><published>2018-05-11T00:00:00-03:00</published><updated>2018-05-11T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2018-05-11:/configuration-friendly-apps.html</id><summary type="html">&lt;p&gt;Some guidelines for config management in general and Python apps in particular.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="configuration management" src="/images/configuration.png" title="Configuration management" /&gt;&lt;/p&gt;
&lt;p&gt;Configuration is just another API of your app. It allows us to preset or modify
it's behavior based on where it is installed and how it will be executed,
providing more flexibility to the users of such software.&lt;/p&gt;
&lt;p&gt;Configuration management is an important aspect of the architecture of any
system. But it is sometimes overlooked.&lt;/p&gt;
&lt;p&gt;The purpose of this post is to explore a proposed solution for proper config
management in general, and for a python app in particular.&lt;/p&gt;
&lt;h2 id="types-of-configuration"&gt;Types of configuration&lt;a class="headerlink" href="#types-of-configuration" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hold on a moment. Configuration understood as a mechanism of altering the state
and behavior of a program can be very broad.&lt;/p&gt;
&lt;p&gt;We are interested in the &lt;em&gt;deterministic configuration&lt;/em&gt; that presets the state
of a program, without having to interact with it, like static config files or
environment variables.&lt;/p&gt;
&lt;p&gt;On the other hand, there's the &lt;em&gt;runtime configuration&lt;/em&gt;, which is set when the
user interacts with the system. User preferences are a typical example of this
kind.&lt;/p&gt;
&lt;p&gt;It may not always apply, but a general rule of thumb is to separate config by
how it affects code: Code that varies depending on where it is run (static),
as oposed on how it is used (runtime).&lt;/p&gt;
&lt;p&gt;We make the distinction because the later is not very general and is up to the
developer to decide how to manage it. If it is a desktop app, a file or a
sqlite database might suffice, but for a cloud app, maybe a distributed
key-value store is needed.&lt;/p&gt;
&lt;h2 id="project-app-vs-library"&gt;Project (app) vs Library&lt;a class="headerlink" href="#project-app-vs-library" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing to determine is the type of software that needs to be
configured. There is a difference between configuring a library vs configuring
a project.&lt;/p&gt;
&lt;p&gt;Lets see an example of how &lt;code&gt;sqlalchemy&lt;/code&gt;, a database toolkit library, provides
us with the needed building blocks for us to use as we please.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;person&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Engine used to store data&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sqlite:///sqlalchemy_example.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create all tables in the engine.&lt;/span&gt;
&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A library is meant to be a reusable piece of code that should not make
assumptions on where and how it is going to be used. &lt;/p&gt;
&lt;p&gt;Imagine if &lt;code&gt;sqlalchemy&lt;/code&gt; gathered it's engine configuration from an environment
variable &lt;code&gt;SQLALCHEMY_ENGINE=sqlite:///sqlalchemy_example.db&lt;/code&gt; or a file in
&lt;code&gt;/etc/sqlalchemy/engine.cfg&lt;/code&gt;. It would be complicated for an app reuse that
library to connect to different databases.&lt;/p&gt;
&lt;p&gt;For this reason a library should be only configured through code, and never
require env variables or configuration files to exist in order to be used. &lt;/p&gt;
&lt;p&gt;A project might use many libraries that require different configs (a database
connector, s3 storage, etc). So it is in charge of gathering required config
and using these libraries.&lt;/p&gt;
&lt;p&gt;In this case, it is the app's responsibility to gather the connection settings
and use the library to connect to two separate databases, because the app knows
what it needs, not the library.&lt;/p&gt;
&lt;h2 id="how-to-configure-a-project-or-application"&gt;How to configure a project (or application)&lt;a class="headerlink" href="#how-to-configure-a-project-or-application" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is important to provide a clear separation of configuration and code. This
is because config varies substantially across deploys and executions, code
&lt;em&gt;should&lt;/em&gt; not. The same code can be run inside a container or in a regular
machine, it can be executed in production or in testing environments.&lt;/p&gt;
&lt;h3 id="where-to-get-configuration-from"&gt;Where to get configuration from&lt;a class="headerlink" href="#where-to-get-configuration-from" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Configuration for a project might come from different sources, like &lt;code&gt;.ini&lt;/code&gt;
files, envirionment variables, etc.&lt;/p&gt;
&lt;p&gt;For example, there is a common pattern to read configurations in environment
variables&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="#fn:0" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that look similar to the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Why is getting config variables directly a bad idea?&lt;/p&gt;
&lt;p&gt;If env var &lt;code&gt;DEBUG=False&lt;/code&gt; this code will print &lt;code&gt;True&lt;/code&gt; because
&lt;code&gt;os.environ.get("DEBUG", False)&lt;/code&gt; will return an string &lt;code&gt;‘False’&lt;/code&gt; instead of a
boolean &lt;code&gt;False&lt;/code&gt;. And a non-empty string has a &lt;code&gt;True&lt;/code&gt; boolean value. We can't
(dis|en)able debug with env var &lt;code&gt;DEBUG=yes|no&lt;/code&gt;, &lt;code&gt;DEBUG=1|0&lt;/code&gt;,
&lt;code&gt;DEBUG=True|False&lt;/code&gt;. We need to start casting/parsing everywhere.&lt;/p&gt;
&lt;p&gt;If we want to use this configuration during development we need to define this
env var all the time. We can't define this setting in a configuration file that
will be used if &lt;code&gt;DEBUG&lt;/code&gt; envvar is not defined.&lt;/p&gt;
&lt;p&gt;Well designed applications allow different ways to be configured. A proper
settings-discoverability chain goes as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CLI args, mostly used to allow users do some exploration while running your program.&lt;/li&gt;
&lt;li&gt;Environment variables, that can be set in &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.env&lt;/code&gt; files and, since they are global, they should have some sort of prefix like &lt;code&gt;MYAPP_*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Config files in different directories, that also imply some hierarchy. For
   example: config files in &lt;code&gt;/etc/myapp/settings.ini&lt;/code&gt; are applied system-wide,
   while &lt;code&gt;~/.config/myapp/settings.ini&lt;/code&gt; take precedence and are user-specific.&lt;/li&gt;
&lt;li&gt;Hardcoded constants.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rises the need to consolidate configuration in a single source of truth to
avoid having config management scattered all over the codebase. &lt;/p&gt;
&lt;p&gt;All this configuration management should be handled before the program starts,
to avoid parsing files, or passing CLI args everywhere. So ideally we would
have a single &lt;code&gt;config.py&lt;/code&gt; file where settings are gathered, parsed and
processed. The app imports that config module and distributes it to all the
different libraries it is using.&lt;/p&gt;
&lt;p&gt;An example startup script for your app could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChainMap&lt;/span&gt;

&lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cli_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;iniparser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;iniparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/app/config.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.myapp.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iniparser&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChainMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cli_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name___&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This snippet uses &lt;code&gt;ChainMap&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; to lookup values in different dictionary-like objects. To our convenience, the &lt;code&gt;configparser&lt;/code&gt; module has builtin support to read multiple &lt;code&gt;.ini&lt;/code&gt; files and merge them.&lt;/p&gt;
&lt;h3 id="a-single-executable-file"&gt;A single executable file&lt;a class="headerlink" href="#a-single-executable-file" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another anti-pattern to be aware of is having as many configuration modules as
environment there are:  &lt;code&gt;dev_settings.py&lt;/code&gt;, &lt;code&gt;staging_settings.py&lt;/code&gt;,
&lt;code&gt;local_settings.py&lt;/code&gt;, etc, and including different logic on them.&lt;/p&gt;
&lt;p&gt;A very simple example of custom logic is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# base_settings.py&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# dev_settings.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base_settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Should be a single &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# this is what the app uses&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BASE_PLUGINS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EXTRA_PLUGINS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which gets its config from a local ini file for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/app/config.ini for everyone&lt;/span&gt;
&lt;span class="na"&gt;BASE_PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;foo,bar&lt;/span&gt;

&lt;span class="c1"&gt;# ~/.config/app/config.ini that a user overrides based on the template&lt;/span&gt;
&lt;span class="na"&gt;EXTRA_PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way the only thing that changes is pure configuration variables, but the
same configuration code gets executed everywhere. We also were able to separate
configuration from code, which gives us some nice features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ship configuration separately from code. There is no need to modify code in
   order to change it's behavior.&lt;/li&gt;
&lt;li&gt;Plain text files are &lt;em&gt;universal&lt;/em&gt; &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;. Can be edited with any text editor,
   no need to mess with db connectors/sql/scripts to configure an app.&lt;/li&gt;
&lt;li&gt;No need to know a programming language to configure the app. &lt;a href="https://www.vagrantup.com/docs/vagrantfile/" title="Vagrantfile"&gt;Vagrant&lt;/a&gt;,
   for example, uses Ruby for it's &lt;code&gt;Vagrantfile&lt;/code&gt;, it is a bummer to have to
   learn the syntax of a language just to use a tool.&lt;/li&gt;
&lt;li&gt;Since config files are not executable, they can partially override other
   config files in a line of hierarchy, as opposed to &lt;code&gt;.vimrc&lt;/code&gt; files for
   example, that are executable and have to be &lt;em&gt;forked&lt;/em&gt; to be adapted and a
   base config cannot be shared for all users in the system).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The example of configuring plugins is not accidental. The idea is to show that
if you need to enable the user to do some scripting as customization, do so
through a plugin system, but never through scriptable config files.&lt;/p&gt;
&lt;h3 id="the-settingstemplate-trick"&gt;The &lt;code&gt;settings.template&lt;/code&gt; trick&lt;a class="headerlink" href="#the-settingstemplate-trick" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We still need a way to bundle settings for different environments: QA, stating,
production, test, Bill's dev machine, etc&lt;/p&gt;
&lt;p&gt;Also, a litmus test for whether an app has all config correctly factored out of
the code is whether the codebase could be made open source at any moment,
without compromising any credentials. What this means is that credentials and
secrets should also be kept outside the codebase and made configurable.&lt;/p&gt;
&lt;p&gt;So secrets and environment dependant settings have to be handled somehow.&lt;/p&gt;
&lt;p&gt;Config files are very convenient since they can be version-controlled, can be
put into templates by Config Management/Orchestration tools and come handy when
developing.&lt;/p&gt;
&lt;p&gt;Following the example above, a &lt;code&gt;config.ini.template&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# config.ini.template that each environment can implement&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# EXTRA_PLUGINS = one_plugin,another_plugin&lt;/span&gt;
&lt;span class="c1"&gt;# SECRET_KEY = &amp;lt;change me&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even env vars can be put into a file (typically named &lt;code&gt;.env&lt;/code&gt;) that gets loaded
before the program starts. Many tools that manage processes/containers, like
&lt;a href="https://docs.docker.com/compose/env-file/" title="Declare default environment variables in file"&gt;docker-compose&lt;/a&gt; and &lt;a href="https://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html" title="Using environment variables in systemd units"&gt;systemd&lt;/a&gt;, or even &lt;a href="https://github.com/theskumar/python-dotenv" title="python-dotenv"&gt;libraries&lt;/a&gt; have support for
loading them.&lt;/p&gt;
&lt;p&gt;It is common practice to put an example &lt;code&gt;settings.template&lt;/code&gt; file that is in the
VCS, and then provide a way to copy + populate that template to a name that is
excluded by your VCS so that we never accidentally commit that. These files
might also be tracked by VCS, but encrypted, like it is done with &lt;a href="https://docs.ansible.com/ansible/2.4/vault.html" title="Ansible Vault"&gt;Ansible
Vault&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="devops-tools"&gt;Devops tools&lt;a class="headerlink" href="#devops-tools" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code needs to be &lt;a href="https://12factor.net/build-release-run" title="The twelve-factor app | build, release, run"&gt;packaged, distributed, configured, installed, executed and
monitored&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are all steps that make use of &lt;a href="https://twitter.com/raymondh/status/1039628786491248640"&gt;external tools&lt;/a&gt; that are not part of the
codebase and should be replaceable. An app could be packaged for Ubuntu or
Windows differently, can be installed manually or put in a container. For this
reason, code should be as agnostic of these steps as possible and delegate that
to another actor called: &lt;em&gt;Installer/Builder&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This new actor can be one or many tools combined, for example &lt;code&gt;docker-compose&lt;/code&gt;,
&lt;code&gt;yum&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;ansible&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The installer actor is the one that knows how to bind code with the right
configuration it needs and how to do it (through env vars or files or cli args
or all of them). Because it knows the configuration it needs to inject into the
project, it makes a good candidate to manage configuration templates for
files, vars that will be injected into the environment, or how to keep
secret/sensitive information protected.&lt;/p&gt;
&lt;p&gt;The development and operations flow has two clearly distinct realms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;+-------+&lt;/span&gt;           &lt;span class="o"&gt;+-------+&lt;/span&gt;          &lt;span class="o"&gt;+--------+&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;  &lt;span class="o"&gt;+----------&amp;gt;|&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;+---------&amp;gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&amp;lt;--------+&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;|&amp;lt;--------+&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------+&lt;/span&gt;           &lt;span class="o"&gt;+-------+&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;
                                       &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;
                    &lt;span class="o"&gt;+-------+&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;
                    &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
                    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;  &lt;span class="o"&gt;+---------&amp;gt;|&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;|&amp;lt;--------+&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;|&amp;lt;--------+&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
                    &lt;span class="o"&gt;+-------+&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;
                                       &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;
                    &lt;span class="o"&gt;+-------+&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;         &lt;span class="o"&gt;+-------+&lt;/span&gt;
                    &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
                    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;  &lt;span class="o"&gt;+---------&amp;gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&amp;lt;--------+&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;|&amp;lt;--------+&lt;/span&gt; &lt;span class="n"&gt;conf&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
                    &lt;span class="o"&gt;+-------+&lt;/span&gt;          &lt;span class="o"&gt;+--------+&lt;/span&gt;         &lt;span class="o"&gt;+-------&lt;/span&gt;          &lt;span class="o"&gt;+-------+&lt;/span&gt;

&lt;span class="o"&gt;+-------------------+---------------------------------------------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;realm&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;                   &lt;span class="n"&gt;Devops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CM&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Orchestraion&lt;/span&gt; &lt;span class="n"&gt;realm&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------------------+---------------------------------------------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that developers are also users of the software, that need to configure
it and are constantly doing micro-releases while developing.&lt;/p&gt;
&lt;p&gt;If you use different tools when developing and when deploying, all these
scripts and templates will start to increase in number. Ideally, a project
should support &lt;a href="https://12factor.net/dev-prod-parity" title="The twelve-factor app | dev/prod parity"&gt;one set of build tools&lt;/a&gt; and use it for development and
production. For example: docker everywhere.&lt;/p&gt;
&lt;h3 id="managing-config-changes"&gt;Managing config changes&lt;a class="headerlink" href="#managing-config-changes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ideally, programs should have the ability to be notified when there are new 
configs to be picked up.&lt;/p&gt;
&lt;p&gt;This is possible if configuration is provided through files, not so easy if we
used environment vars or CLI arguments, in which case we would have to restart
the program.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Signal_(IPC)#SIGHUP" title="Posix signals"&gt;SIGHUP signal&lt;/a&gt; is usually used to trigger a reload of configurations
for daemons.&lt;/p&gt;
&lt;p&gt;In Python, this can be achieved with the &lt;code&gt;signal&lt;/code&gt; module, as the following gist shows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# do something with get_config().foo&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# teardown&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;signal_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Use kill -15 &amp;lt;pid&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;signum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
        &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;  &lt;span class="c1"&gt;# terminate daemon&lt;/span&gt;

    &lt;span class="c1"&gt;# kill -1 &amp;lt;pid&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;signum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGHUP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# reload config&lt;/span&gt;


&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGHUP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, the program can be notified about new config by using &lt;code&gt;kill -1&lt;/code&gt; or, with
systemd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl reload application.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the app is part of a distributed cloud system, the same principle can still
be used. For example, Consul, a tool for service and configuration discovery
provides &lt;code&gt;consult-template&lt;/code&gt;, a command to populate values from Consul &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; into
automatically &lt;a href="https://vimeo.com/109626825" title="Consul template demo"&gt;updated templates&lt;/a&gt; that can emit reload commands to programs
to pick it up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ consul-template &lt;span class="se"&gt;\&lt;/span&gt;
    -template &lt;span class="s2"&gt;&amp;quot;/tmp/nginx.ctmpl:/var/nginx/nginx.conf:nginx -s reload&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -template &lt;span class="s2"&gt;&amp;quot;/tmp/redis.ctmpl:/var/redis/redis.conf:service redis restart&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -template &lt;span class="s2"&gt;&amp;quot;/tmp/haproxy.ctmpl:/var/haproxy/haproxy.conf&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, there is another tool in charge of managing configuration, building it and notifying our code about it.&lt;/p&gt;
&lt;h2 id="introducing-prettyconf"&gt;Introducing prettyconf&lt;a class="headerlink" href="#introducing-prettyconf" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/osantana/prettyconf" title="Prettyconf"&gt;Prettyconf&lt;/a&gt; is a framework agnostic python library created to make easy
the separation of configuration and code. It lets you use the principles we
discribed about configuration-discovery.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prettyconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prettyconf.loaders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CommandLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IniFile&lt;/span&gt;


&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;system_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/myapp/config.ini&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;user_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/.config/myapp.ini&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;loaders&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;CommandLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;IniFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_config&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;IniFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;system_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DEBUG_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the snippet above, the &lt;code&gt;debug&lt;/code&gt; config will be discovered from the command
line args, the environment or different &lt;code&gt;.ini&lt;/code&gt; files, even following good naming
conventions, like checking for &lt;code&gt;DEBUG&lt;/code&gt; in the environment but &lt;code&gt;debug&lt;/code&gt; in the
ini files, and pasing that to a boolean. All these loaders are optional, and
won't fail if the files are missing.&lt;/p&gt;
&lt;p&gt;With prettyconf there are no excuses not to follow best pratices for
configuration management in your app &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="conclusions"&gt;Conclusions&lt;a class="headerlink" href="#conclusions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Don't take responsibility of gathering configuration when developing a library.&lt;/p&gt;
&lt;p&gt;In your app, always use a single &lt;code&gt;config.py&lt;/code&gt; file that gathers all settings and
load it before starting the program.&lt;/p&gt;
&lt;p&gt;Keep in mind what belongs to which realm when writing code/scripts. Everything
can live in the same repo, but at least they will be in different folders
(&lt;code&gt;src/&lt;/code&gt; and &lt;code&gt;ops/&lt;/code&gt;, for example). Configuration for each service (Nginx,
Postgresql, etc) should be handled separately, by specialized tools.&lt;/p&gt;
&lt;p&gt;And speaking of tools, consolidate a very similar set of tool for dev and
production envs.  Containers are gaining popularity everywhere, use something
like &lt;a href="https://www.docker.com/" title="Docker"&gt;docker&lt;/a&gt; or &lt;a href="https://github.com/ansible/ansible-container" title="Ansible Container"&gt;ansible-container&lt;/a&gt; for both realms.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:0"&gt;
&lt;p&gt;They are &lt;a href="https://12factor.net/config" title="The twelve-factor app | config"&gt;very common&lt;/a&gt;, specially among cloud platforms, like AWS lambda
  functions. It's one of the simplest ways for configuring programs without the
  need to mess with files (which requires access to a filesystem) or CLI parsers,
  since this ENV vars are available as is, like an already parsed config file.&amp;#160;&lt;a class="footnote-backref" href="#fnref:0" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Now, not everything that is configuration should me handled through prettyconf.
  For example, &lt;a href="https://www.getlektor.com/" title="Lektor"&gt;lektor&lt;/a&gt; is a flat-file cms, that lets you define the models
  in &lt;code&gt;.ini&lt;/code&gt; files. This type of configuration that goes beyond doing a setting's
  key lookup, should be handled apart from prettyconf.&lt;/p&gt;
&lt;p&gt;Another responsability that doesn't belong to prettyconf is populating
  configuration files of setting variables in the environment, since it is
  someone else's duty, like &lt;a href="https://github.com/theskumar/python-dotenv"&gt;python-dotenv&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Turns out that using &lt;code&gt;ChainMap&lt;/code&gt; you can implement this very simple
  &lt;a href="https://blog.florimondmanca.com/a-practical-usage-of-chainmap-in-python"&gt;lookup algorithm&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;A nice thing about &lt;code&gt;consul-template&lt;/code&gt; is that it let's you use the same
  configuration system on any environment. So when developing locally, you
  don't care about Consul, you app simply reads a config file. When in
  production, you can inject dynamic settings and &lt;a href="https://github.com/theskumar/python-dotenv"&gt;even secrets&lt;/a&gt; to the app
  lookup algorithm.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;The problem with using something other than plain text files is that you
  will necessarily have to execute a program in order to get the desired
  configuration out of it. A programming language has control structures, can
  make calls to the internet, etc, so you can't known in advance the output you
  will get. &lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP518&lt;/a&gt; is a proposal to use a TOML file for this and other
  issues.&lt;/p&gt;
&lt;p&gt;Take as an example python's &lt;code&gt;setup.py&lt;/code&gt;. You can't execute a &lt;code&gt;setup.py&lt;/code&gt;
  file without knowing its dependencies, but currently there is no standard
  way to know what those dependencies are in an automated fashion without
  executing the &lt;code&gt;setup.py&lt;/code&gt; file where that information is stored.&lt;/p&gt;
&lt;p&gt;Another application that faces a similar problem is Vim with it's
  &lt;code&gt;.vimrc&lt;/code&gt; file, it's written in a custom language called &lt;code&gt;VimL&lt;/code&gt;. The &lt;a href="https://xi-editor.io/xi-editor/docs/config.html" title="Xi editor"&gt;Xi&lt;/a&gt;
  editor, fixed this problem by switching to TOML files and plugins for
  extending functionality.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Programming"></category><category term="python"></category><category term="best-practices"></category><category term="configuration"></category><category term="architecture"></category><category term="tools"></category></entry><entry><title>It's the competition, stupid</title><link href="http://hernantz.github.io/its-the-competition-stupid.html" rel="alternate"></link><published>2018-03-07T00:00:00-03:00</published><updated>2018-03-07T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2018-03-07:/its-the-competition-stupid.html</id><summary type="html">&lt;p&gt;Increasing your chances of prosperity.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="it's the competition stupid" src="/images/competition.jpg" title="Picture of Advertisements in Saigon, Vietnam" /&gt;&lt;/p&gt;
&lt;h2 id="abstract"&gt;Abstract&lt;a class="headerlink" href="#abstract" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since high school I've always had the hunch that freedom was the obvious way
for a society to progress in terms of efficiency, equality, wealth, knowledge
and justice. I've been biased to justify everything as lack of freedom or as a
consequence worth suffering because of an excess of freedom.&lt;/p&gt;
&lt;p&gt;But I later came to a realization: concepts like justice and equality are mere
ideals hard to reach universally. What is fair for some, might not be so for
others. Concepts like these, only make sense when applied in a pragmatic way in
a given time and place.&lt;/p&gt;
&lt;p&gt;So maybe socialists, anarchists, conservatives and liberals all have something
to add to the table. To some extent, their claims might be relevant or absurd,
again, depending on the context of such claims.&lt;/p&gt;
&lt;p&gt;Using mantras like seize the means of production, let the free market solve the
problem, education should be our priority, etc, are hollow and vague, without
proper context, hypotheses and facts.&lt;/p&gt;
&lt;p&gt;So now I don't simply praise freedom &lt;em&gt;per se&lt;/em&gt;, but freedom as a framework for
decision making,  freedom to explore different ideas, that on purpose or as an
unintended consequence, increase the chances of prosperity for our society, as
a whole, in the long run.&lt;/p&gt;
&lt;h2 id="and-justice-for-all"&gt;...And justice for all&lt;a class="headerlink" href="#and-justice-for-all" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no way to specify in precise general rules, known beforehand, what
might be necessary to achieve results that would meet the standards of cosmic
justice.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt; ― Thomas Sowell, &lt;a href="https://www.goodreads.com/book/show/86312.The_Quest_for_Cosmic_Justice" title="The Quest for Cosmic Justice"&gt;The Quest for Cosmic Justice&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First we need to understand some key limitations about the nature of our
existence.&lt;/p&gt;
&lt;p&gt;We live and die in a universe where many things are defined in a way we do not
understand nor control and can change for that matter. The flow of time,
cancer, gravity, the weather, the certainty of death, the Creation itself &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Because of that, we are not 100% free. &lt;strong&gt;We are conditioned, limited and
biased&lt;/strong&gt; by what we know and don't know, by what we can and cannot do, by what
we perceive and feel, by what we believe.&lt;/p&gt;
&lt;p&gt;Every day, all of us are making decisions that involve gambles. These gambles
are sometimes big like what occupation to pursue, whom to marry, how to invest
your savings or to have unprotected sex. Other times those gambles are small:
ignoring a phone call or trying a different menu in your favorite fast-food
restaurant.&lt;/p&gt;
&lt;p&gt;The decisions we make are based on ideas of a reality we interpret according to
our limited vision of partial facts. We also need to factor the cost of
opportunity, you only have so much money or some much time.&lt;/p&gt;
&lt;p&gt;In every decision we make, we take our chances. Every choice has it's
consequences. Since no one knows the future for granted, there are always risks
implied, unexpected outcomes. In other words, &lt;strong&gt;success cannot be guaranteed&lt;/strong&gt;
for anyone and by anyone.&lt;/p&gt;
&lt;p&gt;We can point to an idea of "doing the best according to the circumstances we
live in", and that in these circumstances, part of our future depends on the
quality of decisions we make, but other times it depends on our luck. Because
as it happens, in a sufficiently complex system, often those decisions are not
made by us, yet we bear the consequences nonetheless: the candidate you didn't
like gets elected president, a lighting strikes your home and burns your
appliances, your neighbors were noisy celebrating a birthday party and you
couldn't sleep the night before the final exam, etc. You can imagine that,
under these circumstances, &lt;strong&gt;there is no perfect decision&lt;/strong&gt;, because the
obvious right thing to do might not always be an option.&lt;/p&gt;
&lt;p&gt;In a sufficiently diverse society, &lt;strong&gt;equality of opportunities is not
guaranteed&lt;/strong&gt; either. Some are born in rich families and some are born in poor
ones. Some go to good schools and some don't even go to school. Some suffered
an accident and some won the lottery. Some are deaf and some are blind. Some
are strong and some are weak. Some are handsome and some are ugly. Some were
loved by their parents and some were not even wanted.&lt;/p&gt;
&lt;p&gt;Amidst the multiple factors that generate differences in a population there's
gender. Very basic and yet very profound in &lt;a href="https://www.psychologytoday.com/articles/201711/the-truth-about-sex-differences"&gt;it's impact on personality and
behavior&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And even if opportunities are provided, not everyone might be wise to take
advantage of them. Some act rationally and some act compulsively. Some might
love to travel, some just prefer to stay home &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. Some like to study or work
hard and some simply like to slack. Some only read the finance section in the
newspaper and some just read the horoscope. Some eat healthy and do sports
while others smoke and follow a sedentary lifestyle. Well you get the point,
&lt;strong&gt;equality of outcome cannot be guaranteed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Seeing how complex, limited and fragile our existence is, would you say that
life is fair? And if not, who should fix it? How should justice be provided?
What does justice or equality mean? What if to benefit some, others have to be
affected negatively? Can a fair society be built? How would you define fair?
&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;But wait, not only we are interested in some form of justice, we also want to
have the chance to enjoy the fruits of prosperity. So we have to agree on it's
definition too.&lt;/p&gt;
&lt;p&gt;Some societies may measure progress by advancements in human rights or the
level of happiness of it's individuals &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, others by more &lt;a href="https://www.learnliberty.org/blog/permissionless-innovation-the-fuzzy-idea-that-rules-our-lives/" title="Permissionless innovation"&gt;concrete
figures&lt;/a&gt; like GDP, child mortality, use of green energy or number of
college graduates.&lt;/p&gt;
&lt;p&gt;Maybe all of them are desirable, but which one is more important and how much
more important? Remember you always have limited resources, so there will be
sacrifices needed to be done.&lt;/p&gt;
&lt;p&gt;Moreover, pray consider that there are multiple ways to measure things like
efficiency, innovation or even poverty.&lt;/p&gt;
&lt;p&gt;If the right thing to do is not self evident, this leads to an obvious
conclusion: &lt;strong&gt;there is no absolute standard of justice and prosperity&lt;/strong&gt;. The
pursuit of these universal goals &lt;a href="https://www.youtube.com/watch?v=dCnxOICRtLE" title="Milton Friedman - Equality and Freedom"&gt;is futile&lt;/a&gt;. They can only be approximated
to an agreed ideal that might change over time and is prone to subjective
interpretation, if no reliable metrics are provided.&lt;/p&gt;
&lt;p&gt;Something we can do to mitigate this is to agree on a set of artificial
impositions and metrics that we are all going to live by. Rules of the game, if
you will, that are better, to our understanding, for the kind of society we
want to live in.&lt;/p&gt;
&lt;p&gt;While these arbitrary rules might come from traditions, the constitution, moral
conventions or even scientific papers, they cannot be agreed universally, nor
will they be perfect. Ideally we would have the opportunity to be part of their
selection and later fine tuning somehow.&lt;/p&gt;
&lt;h2 id="public-enemy-number-one"&gt;Public enemy number one&lt;a class="headerlink" href="#public-enemy-number-one" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now how do get there? As it happens, in the search for justice, equality,
happiness or a better life for that matter, we come together with people alike
and form an organization, that would pursue the common goals we share.&lt;/p&gt;
&lt;p&gt;To achieve those goals, different organizations might have different
approaches.&lt;/p&gt;
&lt;p&gt;There are organizations that allow other organizations to co-exists, ie.
multiple newspapers, soccer teams, microprocessors manufacturers, NGOs, etc.
Anyone can choose which one to interact with, based on whatever their
motivations and possibilities are.&lt;/p&gt;
&lt;p&gt;There are other types of organizations that don't allow alternatives to
co-exist. Governments are the most representative example of this kind.&lt;/p&gt;
&lt;p&gt;I'm considering the government as an organization that defines rules and takes
measures that are for all to obey or comply (a.k.a forced collectivism).
Governments have the power of law enforcement, which other organizations don't.&lt;/p&gt;
&lt;p&gt;Can governments be the right tool for the job, to become agents of change,
bring prosperity and justice to it's people? Of course they can!&lt;/p&gt;
&lt;p&gt;Yet you might want to hear some aspects to keep in mind before you fully commit
to them.&lt;/p&gt;
&lt;h3 id="governments-are-run-by-politicians"&gt;Governments are run by politicians&lt;a class="headerlink" href="#governments-are-run-by-politicians" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lets assume politicians are honest and corruption is a thing of the past (left
behind with the roman empire). They would rather loose votes than lie to their
people and promise things they cannot deliver.&lt;/p&gt;
&lt;p&gt;They were elected because they are the right choice for the job, not because
they are friends or family of powerful people, nor because they are famous or
charismatic and give beautiful speeches. They do what is correct and not what
is politically correct. They define themselves as public servants and do not
look to increase their influence and power and least they want to perpetuate in
it.&lt;/p&gt;
&lt;p&gt;They convince people about their ideas by providing reasonable arguments backed
by real data, and not through costly advertising campaigns or feeding
sensationalism.  They do listen to constructive feedback and do not demonize
those who have different opinions.&lt;/p&gt;
&lt;p&gt;Finally, they do not believe reality can be shaped by laws, but rather
understand that changes have to be implemented in scheduled phases and their
results tracked down.&lt;/p&gt;
&lt;p&gt;We all know that this is asking a lot, but, even if you are not governed by
populist, dishonest or mediocre bureaucrats...&lt;/p&gt;
&lt;h3 id="governments-are-the-opium-of-the-people"&gt;Governments are the opium of the people&lt;a class="headerlink" href="#governments-are-the-opium-of-the-people" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The best way to take control over a people and control them utterly is
to take a little of their freedom at a time, to erode rights by a thousand
tiny and almost imperceptible reductions. In this way, the people will not
see those rights and freedoms being removed until past the point at which
these changes cannot be reversed.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;― Pat Miller, &lt;a href="https://www.goodreads.com/book/show/22033450-willfully-ignorant" title="Willfully Ignorant"&gt;Willfully Ignorant&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See, it's not all about politicians.&lt;/p&gt;
&lt;p&gt;Alfred Adler once said: "It is always easier to fight for one's principles than
to live up to them", and this is precisely why it is very common to have
zombies supporting visions that sometimes they don't fully understand or have
the interest in scrutinizing.&lt;/p&gt;
&lt;p&gt;This hypocrisy is a golden opportunity for aspiring leaders to influence
people's desires and discontent.&lt;/p&gt;
&lt;p&gt;Political campaigns nowadays are not that different from marketing campaigns,
where ideas of a "better nation" or "let me solve all your problems for free"
are being sold by messianic reformers.&lt;/p&gt;
&lt;p&gt;In this sense, paternalism, understood as a mechanism of managing individuals,
often benevolently, but intrusively for sure, is a real threat for the
governed.&lt;/p&gt;
&lt;p&gt;The state, as any other organization, is a living organism, that expands trying
to survive and perpetuate. There's a natural tendency for governments to grow
and freedoms to shrink, taxes are never enough, regulations lead to more
regulations &lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Soon the government becomes a services company, providing or overseeing
unemployment insurance, energy production and distribution, health care,
education, food stamps, housing, border security, you name it, taking decisions
for people as opposed to having each individual figure out their ways to solve
their particular necessities, through voluntary transactions. Now there is a
government-dependent horde of voters that need someone to fix their problems.
Decision making is transfered to the state. The costs, are never accounted for,
neither mentioned explicitly.&lt;/p&gt;
&lt;h3 id="governments-dont-have-enough-competition"&gt;Governments don't have enough competition&lt;a class="headerlink" href="#governments-dont-have-enough-competition" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;An economy has untold possible outcomes. Its complexity comes both from the
near infinite variety that can come from permutations of simple rules, and
from the fact that billions of humans are playing the game simultaneously,
each affecting the outcomes for each other. Many of the rules are written down
nowhere, controlled by no one, and constantly evolving. Individuals,
businesses, and governments are all players, and none of them can know the
full consequences of their decisions.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;― Tim O'Reilly, &lt;a href="https://www.linkedin.com/pulse/survive-game-business-needs-update-rules-tim-o-reilly" title="To survive, the game of business needs to update its rules"&gt;To survive, the game of business needs to update its rules&lt;/a&gt;.&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every policy that any organization imposes is an experiment basically. If the
organization affects too many people (an entire nation for example), the
experiment feels a lot like putting all the eggs in the same basket.&lt;/p&gt;
&lt;p&gt;Governments make decisions that are difficult in nature (basically they
regulate how people should live), which is very dangerous if there is only one
choice.&lt;/p&gt;
&lt;p&gt;In this regard, governments have become accepted monopolies. More specifically,
they are thought to be &lt;em&gt;good&lt;/em&gt; monopolies, managed by well intentioned experts
with grand schemes to solve big problems.&lt;/p&gt;
&lt;p&gt;Policymakers might only be &lt;em&gt;"experts"&lt;/em&gt; on some field but will never come up
with a sufficiently intelligent design for social engineering and problem
solving, that compares to the vast knowledge embedded in the cultural
intelligence &lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; of a society, which has developed a luck-affected
trial-and-error method for dealing with challenges on top of decentralized
flows of information.&lt;/p&gt;
&lt;p&gt;Moreover, the way representative democracies work today resembles a lot like a
winner takes all kind of game. Sure you can change it every 2, 4 or 5 years,
but what voters end up doing is buying a combo of policies, or giving a blank
check to full-time employed senators, paid with generous wages, to figure out
new regulations. You like the minister of education but you dislike the
minister of culture? Want to keep the economic policies but change the
immigration policies? You cannot handpick what you want and what you don't
want, it's an all-in, pretty much.&lt;/p&gt;
&lt;p&gt;In this sense, your choices are limited to picking an ideology and backing it
up so that it gets to power and hope the government does more of what you
support and less of what you dislike. &lt;/p&gt;
&lt;p&gt;Should something go wrong, the cost of switching to a different provider of
public affairs planning is too high and sometimes unaffordable for an
individual. The only choices left for free citizens are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To go outlaw&lt;/li&gt;
&lt;li&gt;To leave the country/state/province/city (if you are lucky you just leave the
  city, if you are unlucky you leave the country, if you are really unlucky
  you'll have to leave the region/continent)&lt;/li&gt;
&lt;li&gt;To change government (if you are lucky via elections or, if you are really
  unlucky, through a ~~violent~~ revolution)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Henceforth, &lt;strong&gt;centralized and external decision making doesn't seem like a good
idea&lt;/strong&gt;, even if the ones that make those decisions are doing what they think
best, specially when considering the unforetold consequences of well
intentioned initiatives &lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;What this really means is that governments as a mean of change, can be slow,
inefficient and a bottleneck for progress. But, above all, they are a very
risky choice.&lt;/p&gt;
&lt;p&gt;The existence of the state is a necessary evil, but a constant menace to free
society if strict limits are not imposed to it's responsibilities and size.&lt;/p&gt;
&lt;h2 id="possible-solutions"&gt;Possible solutions&lt;a class="headerlink" href="#possible-solutions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;To have progress, you want a system that is competitive, not one that is
dominated by a single power.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;― Joel Mokyr, &lt;a href="https://www.washingtonpost.com/news/wonk/wp/2016/10/28/why-the-industrial-revolution-didnt-happen-in-china/" title="Why the Industrial Revolution didn’t happen in China"&gt;Why the Industrial Revolution didn't happen in China&lt;/a&gt;&lt;/cite&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The important thing to note here is that even if the government is the chosen
agent of change, the odds of succeeding with top-down central planning are
going to be low, compared to a society where decentralized experimentation and
discord are the core values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A society that tests it's ideas constantly&lt;/strong&gt;, enabled by freedom
(understood as a very limited set of artificial impositions &lt;sup id="fnref:8"&gt;&lt;a class="footnote-ref" href="#fn:8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;), and guided
by humility (necessary to accept that one does not have all the answers), will
see higher chances of success over those who do not have a framework of
constant improvement that challenges &lt;em&gt;status quo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is precisely what free markets propose and, to some extent, accomplish.
Non profit and for-profit organizations compete openly to achieve their goals
through transactions and resource management, trying to influence one another,
in a profit and loss system.&lt;/p&gt;
&lt;p&gt;A handful of governments are also implementing some form of social
experimentation to test ideas and their impact and help reduce the risks of new
legislation.&lt;/p&gt;
&lt;p&gt;Consider the controversial example of universal basic income, in which people
are given money for the sole reason of being alive, no strings attached. This
idea brings up many intriguing possibilities, like reducing extreme poverty,
simplifying governmental aid programs, but at the risk of letting people slack
and spend the money on vices or simply bankrupt the system. How much money, how
often, etc, are questions hard to answer. Pilot studies are being run by
&lt;a href="http://blog.ycombinator.com/moving-forward-on-basic-income" title="Moving Forward on Basic Income"&gt;governments&lt;/a&gt; and &lt;a href="http://www.nytimes.com/2016/06/01/business/economy/universal-basic-income-poverty.html"&gt;NGOs&lt;/a&gt; alike with randomly chosen samples of citizens
to confirm hypotheses, before claiming it as a genius or stupid plan.&lt;/p&gt;
&lt;p&gt;Lastly, the closer the government is to it's governed, the better. Prefer local
institutions over federal governments and direct democracy to help reduce
collateral damages and the gap between what the sate does and what people want.
This way, lots of &lt;a href="https://www.seasteading.org/"&gt;small and independent governments&lt;/a&gt; can act as
socio-economic labs running experiments simultaneously. Cities could be a
minimum, viable and independent unit of government.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no absolute standard of justice and progress. Justice should be
provided and progress should be sought in ways that compete with other views
or understandings of the same concepts.&lt;/p&gt;
&lt;p&gt;The availability of choices cannot guarantee, but increases the chances of
prosperity in a free society, by enabling ideas to be probed in competition
with other alternatives.&lt;/p&gt;
&lt;p&gt;In the long term, and even in an unfair system, competition is what drives
progress, while centralized planning is the public enemy number one in this
regard.&lt;/p&gt;
&lt;p&gt;It's the competition, stupid &lt;sup id="fnref:9"&gt;&lt;a class="footnote-ref" href="#fn:9" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;"There is a theory which states that if ever anyone discovers exactly
  what the Universe is for and why it is here, it will instantly disappear
  and be replaced by something even more bizarre and inexplicable. There is
  another theory which states that this has already happened."&lt;/p&gt;
&lt;p&gt;― Douglas Adams, &lt;a href="https://www.goodreads.com/quotes/2397-there-is-a-theory-which-states-that-if-ever-anyone" title="Douglas Adams, The Restaurant at the End of the Universe"&gt;The Restaurant at the End of the Universe&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;"Travel is fatal to prejudice, bigotry, and narrow-mindedness, and many
  of our people need it sorely on these accounts. Broad, wholesome,
  charitable views of men and things cannot be acquired by vegetating in
  one little corner of the earth all one's lifetime."&lt;/p&gt;
&lt;p&gt;― Mark Twain, &lt;a href="https://www.goodreads.com/quotes/1716-travel-is-fatal-to-prejudice-bigotry-and-narrow-mindedness-and-many"&gt;The Innocents Abroad/Roughing It&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The &lt;a href="https://www.flexport.com/blog/port-automation-oakland-rotterdam/" title="Why is the port of Rotterdam more automated than the port of Oakland?"&gt;container revolution&lt;/a&gt; increased world's trade level and
  productivity enormously.  Within 5 years of “containerization,” trade
  among nations increased 320%; within 20 years, trade increased by 790%.
  In 1965, before containerization, a crew could move 1.7 tons of goods
  per hour. After containerization, a crew could move 30 tons per hour — a
  17.6x increase in productivity.  Prior to their introduction, cargo
  shipping was a labor intensive job, requiring multiple packing and
  unpacking of the goods.  The container revolution was of course opposed
  by unions whose jobs would be affected/replaced by automated cranes.
  What should be done in cases like this, where automation and
  standardization affects workers but benefits the productivity of a
  nation? Going further, what would be a just policy for fair trade? When
  is it ok to apply protectionism? Should it be done at national level?
  Regional level? For how long?&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Gross_National_Happiness" title="Gross National Happiness"&gt;Gross National Happiness&lt;/a&gt;: The term was coined in 1972 by Bhutan's
  fourth Dragon King, Jigme Singye Wangchuck. Originally the phrase
  represented a commitment to building an economy that would serve Bhutan's
  culture based on Buddhist spiritual values, instead of western material
  development gauged by gross domestic product (GDP).&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;The effects of regulation -- both benefits and costs -- are difficult to
  measure, particularly when considered in the aggregate. As a result,
  analysts often turn to indirect proxies to understand the reach and
  impact of regulations over time. Some of the statistics used to track
  aggregate regulatory activity over time are presented &lt;a href="https://regulatorystudies.columbian.gwu.edu/reg-stats"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Apparently we tend to overstate the importance of the individual genius
  or leader while understating the gradual, cumulative nature of
  change. The Evolution of Everything, a book by Matt Ridley, argues that
  we observe the decentralized, incremental, trial-and-error process of
  evolution in all human endeavors, including culture, law, business, and
  technology. All this learning and knowledge is condensed in the
  &lt;a href="http://www.nationalaffairs.com/publications/detail/cultural-intelligence" title="Cultural Intelligence"&gt;Cultural Intelligence&lt;/a&gt; of a society.
  This might also explain why top-down solutions to alleviate extreme
  poverty are &lt;a href="https://www.theguardian.com/global-development-professionals-network/2017/feb/08/obsession-with-ending-poverty-is-where-development-is-going-wrong" title="Obsession with ending poverty is where development is going wrong"&gt;often ineffective&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Plans not always go as expected. Sometimes this is because the solution
  was narrow-focused on solving just one side of the equation, and the
  solution backfires because affected agents react. For example, a minimum
  wage law is focused in getting workers paid more, yet this could
  increase prices consumers have to pay and increase the willingness of
  shops to &lt;a href="http://www.forbes.com/sites/realspin/2016/11/29/thanks-to-fight-for-15-minimum-wage-mcdonalds-unveils-job-replacing-self-service-kiosks-nationwide/" title="Thanks To 'Fight For $15' Minimum Wage, McDonald's Unveils Job-Replacing Self-Service Kiosks Nationwide"&gt;replace employees with self-service kiosks&lt;/a&gt;, affecting
  existing a future employees who were supposed to be benefited by this
  regulation.
  Another example is environmental legislation, that forces industries to
  use/sell energy efficient products, in hopes of reducing energy
  consumption and pollution, just to later find out that this leads to an
  overall &lt;a href="https://en.wikipedia.org/wiki/Jevons_paradox" title="Jevons paradox"&gt;greater demand of energy&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;&lt;a href="https://www.learnliberty.org/blog/permissionless-innovation-the-fuzzy-idea-that-rules-our-lives/" title="Permissionless innovation"&gt;Innovation&lt;/a&gt; is often threatened by regulators who require licenses
  or interfere with it through incentives and subsidies.  Napoleon
  Bonaparte said: "My motto has always been: A career open to all talents,
  without distinctions of birth", meaning that every person should not
  have artificial impositions or obstacles that prevent them from pursuing
  a career/goal, should they have the opportunity and capacity to do it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:9"&gt;
&lt;p&gt;"It's the competition, stupid" is a slight variation of the phrase &lt;a href="https://en.wikipedia.org/wiki/It%27s_the_economy,_stupid" title="It's the economy, stupid"&gt;"It's
  the economy, stupid"&lt;/a&gt;. At some point I even thought on putting
  "Competition motherfucker, do you speak it?".&amp;#160;&lt;a class="footnote-backref" href="#fnref:9" rev="footnote" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Politics"></category><category term="ideas"></category><category term="libertarianism"></category></entry><entry><title>Calendaring events with Python</title><link href="http://hernantz.github.io/calendaring-events-with-python.html" rel="alternate"></link><published>2017-04-13T00:00:00-03:00</published><updated>2017-04-13T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2017-04-13:/calendaring-events-with-python.html</id><summary type="html">&lt;p&gt;Some gotchas you'll find when scheduling the next world's doomsday.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Aztec sun stone" src="/images/aztec-calendar.png" title="Aztec sun stone" /&gt;&lt;/p&gt;
&lt;p&gt;2012 passed and the world did not end. Well, scheduling the next world's
doomsday can be tricky, because working with dates is so. In this post I'll try
to share some basic tips and gotchas I learned the hard way while building a
calendaring app, that hopefully will make this task easier for you.&lt;/p&gt;
&lt;h2 id="one-time-events"&gt;One time events&lt;a class="headerlink" href="#one-time-events" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because of the way we track time, a single moment can happen at different times
of the day for different people around the globe and a single date and time can
never happen or happen twice thanks to &lt;a href="https://en.wikipedia.org/wiki/Daylight_saving_time" title="Daylight Saving Time"&gt;DST&lt;/a&gt; or government regulations &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
Yes, working with dates is &lt;a href="http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time" title="More falsehoods programmers believe about time"&gt;hard&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dates mean nothing without the proper context&lt;/strong&gt;, and that context is provided
by what it is called a &lt;a href="https://en.wikipedia.org/wiki/Tz_database" title="Olson Database"&gt;timezone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A timezone doesn't mean just the offset&lt;/strong&gt;, because that offset can change.
Instead they have names, and are attached to a geographical location, under a
certain jurisdiction, unless we are speaking of the UTC timezone, which is a
very special one.&lt;/p&gt;
&lt;p&gt;We should think UTC time as the entire world's current time you compare all
other dates with. It is meant to be objective in the sense that it never was
and won't ever be affected by local time changes.&lt;/p&gt;
&lt;p&gt;Timezone information is available in the &lt;a href="https://en.wikipedia.org/wiki/Tz_database" title="Olson Database"&gt;Olson database&lt;/a&gt;. Since timezones
change every now and then, it is vital to keep your software up to date &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.
If that is something you cannot control, be advised that the dates your system
is dealing with might not be correct (i.e. in an embedded device).&lt;/p&gt;
&lt;p&gt;Updates can be handled differently depending on the OS, program or language you
use. For example, in Linux there is a package &lt;code&gt;tzdata&lt;/code&gt;, but some programs like
the browser or Postgres contain their own copies &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Python provides naive dates by default through it's &lt;code&gt;datetime&lt;/code&gt; module, and it
is someone else's responsibility to provide tz information, for example, &lt;code&gt;pytz&lt;/code&gt;
is a &lt;a href="http://pytz.sourceforge.net/" title="pytz - World Timezone Definitions for Python"&gt;library&lt;/a&gt; that &lt;em&gt;"brings the Olson tz database into Python"&lt;/em&gt; providing
timezone classes to use with &lt;code&gt;datetime&lt;/code&gt; objects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;800151&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;833276&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500463&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UTC&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some attempts have been made for providing extra help to disambiguate naive
dates &lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;, but still, it is highly recommended that you &lt;strong&gt;convert dates to UTC
as soon as they enter the system&lt;/strong&gt; and work with them that way for calculations
and queries. Despite the fact that you can take naive dates as being &lt;a href="http://lucumr.pocoo.org/2011/7/15/eppur-si-muove/" title="“Eppur si muove!”* – Dealing with Timezones in Python"&gt;UTC
implicitly&lt;/a&gt;, I would suggest to still &lt;a href="https://julien.danjou.info/blog/2015/python-and-timezones" title="Timezones and Python"&gt;attach the UTC tz&lt;/a&gt; to them &lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.
This way, all the information is there, and it becomes easier to reason about
dates.&lt;/p&gt;
&lt;p&gt;For example, when logging events, you can see logs that have the same date,
that would seem to be duplicated because of DST. Instead if you have them in
UTC and in the &lt;a href="https://en.wikipedia.org/wiki/ISO_8601" title="ISO 8601"&gt;ISO format&lt;/a&gt;, there is no place left for confusion.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2002-10-27T01:30:00&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# no timezone attached&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-10-27T01:30:00&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;2002-10-27T01:30:00-04:00&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# with timezone attached&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-10-27T01:30:00-05:00&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;2002-10-27T05:30:00+00:00&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# in UTC, evidently there is an hour difference&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-10-27T06:30:00+00:00&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even more, a sever could fire repeated crons or skip them if not configured to
&lt;a href="http://www.creativedeletion.com/2015/08/07/why-not-to-use-server-local-time.html" title="Why not to ask the server for its &amp;quot;local time"&gt;use UTC&lt;/a&gt; due to a DST switch.&lt;/p&gt;
&lt;p&gt;When doing calculations, despite the fact that you can manipulate
aware dates transparently &lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; the math is evident for the programmer if those
dates are in UTC:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buenos_aires&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DstTzInfo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;America/Buenos_Aires&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;STD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;madrid&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DstTzInfo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Europe/Madrid&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;CEST&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;DST&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buenos_aires&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;madrid&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# mmm... why? &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buenos_aires&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UTC&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;madrid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UTC&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# a one hour diff, obvi!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buenos_aires&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;madrid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# yeah! same results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Moreover, event durations can be counter-intuitive if you don't keep in mind the
in-between jumps of DST:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;US/Eastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loc_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# date occured twice&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc_dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_dst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# notice the is_dst flag&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-10-27T01:30:00-05:00&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc_dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_dst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-10-27T01:30:00-04:00&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# same date, time and tz, but different offset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If your are rendering these kind of events in some sort of calendar, you'll
have to decide if dates or duration is what determines how to represent this
event in a slot. And when building these dates, the user needs to disambiguate
them explicitly, providing the &lt;code&gt;is_dst&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;Also, down the line of doing calculations in local timezones, we can see
that when adding timedeltas to a &lt;code&gt;datetime&lt;/code&gt; aware object, you may end up
with the wrong result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Sunday, 7 April 2002, 02:00:00 clocks were turned forward 1 hour to&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Sunday, 7 April 2002, 03:00:00 local daylight time instead&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;US/Eastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;loc_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;edt_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc_dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;est_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edt_dt&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;edt_dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-04-07T02:00:00-05:00&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;est_dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-04-07T03:00:00-05:00&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# mmm they have the same offset, this is odd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;est_dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;2002-04-07T04:00:00-04:00&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# this is what I expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last, but not least, remember to never use &lt;code&gt;replace()&lt;/code&gt; for attaching timezones.
Otherwise you will very probably end up with the wrong date as a result. Use
pytz's &lt;code&gt;normalize()&lt;/code&gt; and &lt;code&gt;localize()&lt;/code&gt; methods instead, since they use the tz
table for convertions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# never existed in US/Eastern&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DstTzInfo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;US/Eastern&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;LMT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;STD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# what?&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eastern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DstTzInfo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;US/Eastern&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;EDT&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;DST&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# much better&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Moving on, now that we know that UTC aware dates everywhere &lt;a href="http://tommikaikkonen.github.io/timezones/" title="timezones"&gt;is the way to
go&lt;/a&gt;, there are some extra details to pay attention to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is a good idea to store the user's timezone, so that you are able
   to format dates in case you don't trust the clients ability to display them
   correctly (due to an outdated db on their side, most likely, or just emails).&lt;/li&gt;
&lt;li&gt;If events are attached to a certain location, like a flight for instance, and
   that location changes it's timezone, then we need to recalculate all scheduled
   dates for that location and notify users about it. &lt;a href="https://codeblog.jonskeet.uk/2019/03/27/storing-utc-is-not-a-silver-bullet/" title="Storing UTC is not a silver bullet"&gt;Simply storing these
   dates in UTC is not enough&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So storing &lt;strong&gt;the timezone of origin&lt;/strong&gt; as way to get back to and from UTC is
important.&lt;/p&gt;
&lt;h2 id="recurring-events"&gt;Recurring events&lt;a class="headerlink" href="#recurring-events" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For generating a series of events you should use the &lt;code&gt;dateutils.rrule&lt;/code&gt; package
&lt;sup id="fnref:8"&gt;&lt;a class="footnote-ref" href="#fn:8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;, which allows a great deal of configuration and manages corner cases like:
&lt;em&gt;every last day of the month&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But when it comes to creating recurring events, say every Monday at 11:00 am,
the user wants those dates to always stay at 11:00 am even if there is a DST
switch at some point.&lt;/p&gt;
&lt;p&gt;The procedure is perfectly explained &lt;a href="https://coderwall.com/p/7t3qdq/datetimes-and-timezones-and-dst-oh-my"&gt;here&lt;/a&gt; and involves naive dates on
purpose!&lt;/p&gt;
&lt;p&gt;We first have to generate the occurrences regardless or the timezone settings,
all at the same time. Because of the way this lib works (&lt;em&gt;basically by adding
timedeltas&lt;/em&gt;), it is that we need to feed it with naive start and/or end dates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Feb 22&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# March 24&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WEEKLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byweekday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MO&lt;/span&gt;&lt;span class="p"&gt;,)))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  &lt;span class="c1"&gt;# all at the same time&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we will attach the user's timezone to these dates and normalize them to
UTC. You can see that the change happens on the stored dates, but the time the
user will see in their local timezone stays intact.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;America/Chicago&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# observes DST switch on March 9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;localized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;localized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Central: {}; UTC: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Central: 2014-02-24 11:00:00-06:00; UTC: 2014-02-24 17:00:00+00:00&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Central: 2014-03-03 11:00:00-06:00; UTC: 2014-03-03 17:00:00+00:00&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Central: 2014-03-10 11:00:00-05:00; UTC: 2014-03-10 16:00:00+00:00&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Central: 2014-03-17 11:00:00-05:00; UTC: 2014-03-17 16:00:00+00:00&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should also set the &lt;code&gt;is_dst&lt;/code&gt; flag in when calling &lt;code&gt;localize()&lt;/code&gt; if needed.&lt;/p&gt;
&lt;h2 id="quering-events"&gt;Quering events&lt;a class="headerlink" href="#quering-events" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When retriving entries for a given period, we need to &lt;strong&gt;think in buckets
determined by the user's localized start and end boundaries&lt;/strong&gt; for that period.&lt;/p&gt;
&lt;p&gt;For example, if we want today's entries, for a user with an offset of UTC-3, it
is important to request those dates in the UTC version of the user's 00:00 to
23:59 time lapse. &lt;em&gt;Today&lt;/em&gt; is relative to the timezone the user is currently at,
and using &lt;em&gt;UTC's today&lt;/em&gt; is not an option since it's going to get us entries
from yesterday's 21:00 to today's 20:59 potentially including or excluding
incorrect results. We need to normalize the user's date range to UTC:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;UTC offset&lt;/th&gt;
&lt;th&gt;Day start&lt;/th&gt;
&lt;th&gt;Day end&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-03:00&lt;/td&gt;
&lt;td&gt;00:00&lt;/td&gt;
&lt;td&gt;23:59&lt;/td&gt;
&lt;td&gt;User's date range&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+00:00&lt;/td&gt;
&lt;td&gt;00:00&lt;/td&gt;
&lt;td&gt;23:59&lt;/td&gt;
&lt;td&gt;UTC's date range&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-03:00&lt;/td&gt;
&lt;td&gt;21:00&lt;/td&gt;
&lt;td&gt;20:59&lt;/td&gt;
&lt;td&gt;UTC's date range compared to user's&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+00:00&lt;/td&gt;
&lt;td&gt;03:00&lt;/td&gt;
&lt;td&gt;02:59&lt;/td&gt;
&lt;td&gt;User's date range normalized with UTC [✓]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following piece of code shows exactly how to query today's entries for a
user. See how &lt;code&gt;time.min&lt;/code&gt; and &lt;code&gt;time.max&lt;/code&gt; come in handy when calculating the
start and end boundaries for a date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;today_only&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# datetime.datetime.combine returns naive dates :(&lt;/span&gt;
    &lt;span class="n"&gt;local_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local_today_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;local_today_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;today_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_today_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;today_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_today_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;today_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;today_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For next/previous month or next/previous week you should use &lt;code&gt;rrule&lt;/code&gt; which can
give you those dates, since the math is not as simple as adding 30 days to get
the next month's results (not every month has the same length) or calculating
when the next week starts. Then you just have to follow the same aforementioned
approach.&lt;/p&gt;
&lt;p&gt;Quering past or future events, with that sole condition, is a different story.
Since dates are typically stored in UTC and we care about entries before or
after &lt;em&gt;now&lt;/em&gt;, it doesn't matter which timezone the user is at, &lt;em&gt;now&lt;/em&gt; represents
the same moment in any timezone, so we don't have to translate the user's &lt;em&gt;now&lt;/em&gt;
to UTC's &lt;em&gt;now&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Assuming event dates are stored in UTC (like postgres does).&lt;/span&gt;
&lt;span class="c1"&gt;# These convertions might not be needed depending on the storage engine&lt;/span&gt;
&lt;span class="c1"&gt;# or frameworks you are using.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;past&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;future&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Be extra carefull if you are caching these results afected by a date range&lt;/strong&gt;,
and make sure that the timezone is part of the cache's key. This way, if the
timezone changes, because the user is on a trip for instance, the cache gets
invalidated automatically for that user. Otherwise this week's promotions won't
be correctly applied to customers in the case of an e-commerce site for
example.&lt;/p&gt;
&lt;h2 id="notification-events"&gt;Notification events&lt;a class="headerlink" href="#notification-events" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes to scheduling events like digest emails of notifications/news,
lists of pending tasks, aggregated activities, etc, you will also need to
generate a series based on the user preferences for when to receive them.&lt;/p&gt;
&lt;p&gt;You guessed it, &lt;code&gt;rrule&lt;/code&gt; again to the rescue! But having all future occurrences
generated in advance is wasteful.&lt;/p&gt;
&lt;p&gt;In this use case you only care about the next recurrence after now. Every now
and then (i.e. every minute) you poll all scheduled reminders that expired,
execute the task and calculate the next occurrence with a cron-like job &lt;sup id="fnref:9"&gt;&lt;a class="footnote-ref" href="#fn:9" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;US/Eastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rrule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEEKLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byweekday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;byhour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byminute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Get the fist recurrence right after &amp;quot;now&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;next_notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case the user's timezone changes, remember to recalculate next occurrence.&lt;/p&gt;
&lt;h1 id="conclusions"&gt;Conclusions&lt;a class="headerlink" href="#conclusions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Timezones are like variables. They have a name and a value (the UTC offset),
that changes over time thanks to some rules defined in the timezone's database.&lt;/p&gt;
&lt;p&gt;Dates without timezones don't really represent any moment in particular.&lt;/p&gt;
&lt;p&gt;Always use tz aware dates and specifically UTC aware dates inside your program,
but keep a reference to a local timezone that makes sense in case you need to
retrace changes.&lt;/p&gt;
&lt;p&gt;For all this, it is vital to stay up to date with tz updates.&lt;/p&gt;
&lt;p&gt;I hope you found this post useful. My idea was make it a compendium of all
things related to dates I have read about, and had to work with in Python. So I
suggest you to read all linked pages, they are there for a reason!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Many countries have started and stopped using DST and different times.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, 1:30am on 27th Oct 2002 happened twice in the US/Eastern timezone when the
clocks where put back at the end of Daylight Saving Time.
Similarly, 2:30am on 7th April 2002 never happened at all in the US/Eastern timezone, as
the clocks where put forward at 2:00am skipping the entire hour.&lt;/p&gt;
&lt;p&gt;Extracts from &lt;em&gt;the pytz &lt;a href="http://pytz.sourceforge.net/" title="pytz - World Timezone Definitions for Python"&gt;documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Moreover, timezones can change for other reasons that just DST. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 1915 Warsaw switched from Warsaw time to Central European time with no daylight savings
transition. So at the stroke of midnight on August 5th 1915 the clocks were wound back 24
minutes creating an ambiguous time period that cannot be specified without referring to the
timezone abbreviation or the actual UTC offset. In this case midnight happened twice, neither
time during a daylight saving time period. pytz handles this transition by treating the
ambiguous period before the switch as daylight savings time, and the ambiguous period after
as standard time.&lt;/p&gt;
&lt;p&gt;Extracts from &lt;em&gt;the pytz &lt;a href="http://pytz.sourceforge.net/" title="pytz - World Timezone Definitions for Python"&gt;documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;If you see a date formatted like &lt;code&gt;yyyy-mm-ddThh:mm:ss-03:00&lt;/code&gt;, it means that it's offset is UTC-3
  but it also means that to convert it to UTC you have to make that &lt;code&gt;-03:00&lt;/code&gt; part a &lt;code&gt;+00:00&lt;/code&gt;, so in
  this case you have to add three hours to the date for it to be in UTC.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The ICANN organization, which is in charge of hosting the Olson Database, publishes updates through
  a &lt;a href="https://mm.icann.org/mailman/listinfo/tz-announce" title="tz announce maling list"&gt;mailing list&lt;/a&gt;. Some languages like Elixir, have &lt;a href="http://www.creativedeletion.com/2015/12/03/timezone-updates-need-fixing.html" title="Timezone updates need to be fixed"&gt;automatic builds&lt;/a&gt; for their date packages
  when the db gets updated.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;More information about programs, libraries and systems can be found &lt;a href="https://www.iana.org/time-zones/repository/tz-link.html" title="Sources for time zone and daylight saving time data"&gt;here&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0495/" title="PEP 495 -- Local Time Disambiguation"&gt;PEP495&lt;/a&gt; suggests adding an attribute called &lt;code&gt;fold&lt;/code&gt; to instances of the &lt;code&gt;datetime&lt;/code&gt; classes. For
  example, on a system set to US/Eastern timezone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%D %T %Z%z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;11/02/14 01:30:00 EDT-0400&amp;#39;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%D %T %Z%z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;11/02/14 01:30:00 EST-0500&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way we can represent just one moment in time in an ambiguous case.
  Other ideas were also discussed in &lt;a href="https://www.python.org/dev/peps/pep-0431/" title="Timezone support improvements"&gt;PEP431&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;This is a peak at some of the terminology involved when dealing with dates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;naive datetime – a datetime object without a timezone.&lt;/li&gt;
&lt;li&gt;localized datetime – a datetime object with a timezone.&lt;/li&gt;
&lt;li&gt;localizing – associating a naive datetime object with a timezone.&lt;/li&gt;
&lt;li&gt;normalizing – shifting a localized datetime object from one timezone to another, this changes
    both tzinfo and datetime object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the Delorean docs &lt;a href="http://delorean.readthedocs.io/en/latest/quickstart.html" title="Delorean docs"&gt;explain it&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Python cannot mix aware and naive dates or you will get a &lt;code&gt;TypeError:
  can't compare offset-naive and offset-aware datetimes&lt;/code&gt; exception.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;&lt;a href="https://labix.org/python-dateutil" title="python-dateutil"&gt;dateutils&lt;/a&gt; is a must if your app makes intensive use of dates. It
  also provides some other niceties like &lt;code&gt;relativedelta&lt;/code&gt; and &lt;code&gt;parser.parse&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:9"&gt;
&lt;p&gt;If you are working with Django, you might find &lt;a href="https://github.com/ambitioninc/django-localized-recurrence" title="Django localized recurrence"&gt;django-localized-recurrence&lt;/a&gt;
  interesting.&amp;#160;&lt;a class="footnote-backref" href="#fnref:9" rev="footnote" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Programming"></category><category term="python"></category><category term="timezones"></category></entry><entry><title>Django's signal to noise ratio</title><link href="http://hernantz.github.io/djangos-signal-to-noise-ratio.html" rel="alternate"></link><published>2016-04-29T00:00:00-03:00</published><updated>2016-04-29T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2016-04-29:/djangos-signal-to-noise-ratio.html</id><summary type="html">&lt;p&gt;Keeping a balance between decoupled and maintenable code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Contact (1997) scene" src="/images/signal-to-noise-ratio.png" title="Contact (1997)" /&gt;&lt;/p&gt;
&lt;h2 id="noise"&gt;Noise&lt;a class="headerlink" href="#noise" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Signals allow decoupled applications get notified when actions occur elsewhere
in the project. This decoupling can become unmaintainable if not enough care
is taken.&lt;/p&gt;
&lt;p&gt;Most of the time signals are used for doing some action when a model is
saved/deleted.&lt;/p&gt;
&lt;p&gt;For the sake of &lt;a href="https://twitter.com/hernantz/status/623293934857535488"&gt;introducing the topic&lt;/a&gt;, let's consider that our Q&amp;amp;A
application needs to store each user's resume (with experience, studies, etc).
Whenever a new user is created, we'll ensure that it gets it's own &lt;code&gt;Resume&lt;/code&gt;
instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# somewhere inside cv/models.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_save&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;users.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_user_cv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Resume&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If another piece of code is also interest in perfoming some action everytime a
user is saved, like syncing user info with a 3rd party jobs board site for
example, we could acomplish that with another handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# somewhere inside users/models.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.dispatch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_save&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;model_to_dict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;users.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_jobsboard_with_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resume_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_to_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sync_with_jobsboard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resume_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this code expects a curriculum to be associated to this user and that won't
be true for new members.&lt;/p&gt;
&lt;p&gt;Whilst this special case could be catched by proper testing, as code grows
&lt;strong&gt;you'll have a hard time traking moving pieces&lt;/strong&gt;, scattered throughout
different handlers. Specially because &lt;strong&gt;the order in which they get executed is
not inmediatelly clear&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="silence"&gt;Silence&lt;a class="headerlink" href="#silence" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following snippet shows how to put everything in one place, gaining us some
maintainability, but still allowing us differentiate recently created instances,
&lt;code&gt;pre_save&lt;/code&gt; and &lt;code&gt;post_save&lt;/code&gt; code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# pre save code&lt;/span&gt;

        &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# this model does not exist in our db yet&lt;/span&gt;

        &lt;span class="c1"&gt;# persist the model to the db and also ensures&lt;/span&gt;
        &lt;span class="c1"&gt;# that pre/post save signals get emitted&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# post save code, now we have self.pk&lt;/span&gt;

        &lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Resume&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;user_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_to_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;resume_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_to_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sync_with_jobsboard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resume_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Model's &lt;code&gt;save()&lt;/code&gt; method is also a pretty standard method to be overrided since
it is called by other frameworks like DRF or the admin so it makes a good place
to hook in there our custom code.&lt;/p&gt;
&lt;h2 id="signal"&gt;Signal&lt;a class="headerlink" href="#signal" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Truth be told, signals have broader applications that cannot be replaced by
extending a single method.&lt;/p&gt;
&lt;p&gt;For example, when you have to track changes in &lt;code&gt;ManyToManyField&lt;/code&gt; fields&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;favorited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we cannot use the &lt;code&gt;save()&lt;/code&gt; because m2m instances are added or deleted
through intermediate tables which are managed by Django. But we can make use of
the &lt;code&gt;m2m_changed&lt;/code&gt; signals for that: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_fav_notifications&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Send an email to the author of a question whenever it gets fav&amp;#39;ed&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;post_add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify_new_favorite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;m2m_changed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;handle_fav_notifications&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;favorited&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case we needed to track multiple m2m relations, we can do all that in a
single handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FavableMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;favorited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M2MField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;favorite_&lt;/span&gt;&lt;span class="si"&gt;%(class)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify_new_favorite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FavableMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Answer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FavableMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FavableMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m2m_changed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dispatch_uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;m2m_fav_notifications&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_fav_notifications&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FavableMixin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;post_add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify_new_favorite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Signals can also become handy when trying to &lt;strong&gt;react to code you do not own&lt;/strong&gt;.
This other example shows how we can hook some custom code into the &lt;code&gt;auth&lt;/code&gt; third
party app, without having to create a new login view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.signals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;user_login_failed&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;help_user_with_login_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Let&amp;#39;s help our forgetful users login, and email them a login link.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;update_and_get_failure_logins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MAX_LOGIN_ATTEMPTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;send_login_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Sent when the user failed to login successfully&lt;/span&gt;
&lt;span class="n"&gt;user_login_failed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;help_user_with_login_link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django puts emphasis on &lt;strong&gt;following conventions&lt;/strong&gt;, and signals shouldn't be the
exception. You have to place signals and handlers somewhere the framework can
pick them up automatically, and that is usually the &lt;code&gt;models.py&lt;/code&gt; or &lt;code&gt;urls.py&lt;/code&gt; of
each app. Something tidier would be to place them in a &lt;code&gt;signals.py&lt;/code&gt; file or
module and import it explicitly in the app's config file, as suggested by
&lt;a href="https://docs.djangoproject.com/en/1.9/topics/signals/" title="Django documentation"&gt;the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is nothing wrong with signals &lt;em&gt;per se&lt;/em&gt;, so long as there's a good balance
between decoupled and maintenable code. As a general rule I would suggest to
&lt;strong&gt;avoid using signals for code you own&lt;/strong&gt;. Instead put everything inside a method
or view, and &lt;em&gt;try to avoid them&lt;/em&gt; for code you don't own, &lt;strong&gt;except when it sounds
like a good idea&lt;/strong&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="django"></category><category term="python"></category><category term="best-practices"></category></entry><entry><title>The sorry state of jQuery plugins</title><link href="http://hernantz.github.io/the-sorry-state-of-jquery-plugins.html" rel="alternate"></link><published>2016-03-31T00:00:00-03:00</published><updated>2016-03-31T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2016-03-31:/the-sorry-state-of-jquery-plugins.html</id><summary type="html">&lt;p&gt;Customization is not enough, some plugins simply do too much.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When adding jQuery widgets to enhance your web app, you'll find &lt;strong&gt;two possible
approaches&lt;/strong&gt; in their implementation: On one the plugin does everything for
you (and by &lt;em&gt;everything&lt;/em&gt; I simply mean &lt;em&gt;too much&lt;/em&gt;), on the other, the plugin
does the minimum. But of course there is a wide range in between.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bootstrap 3 popovers" src="/images/popovers.png" title="Bootstrap 3 popovers" /&gt;&lt;/p&gt;
&lt;h2 id="the-way-of-jquery-plugins"&gt;The way of jQuery plugins&lt;a class="headerlink" href="#the-way-of-jquery-plugins" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To begin, lets see what Boostrap offers for using it's plugins. A plugin
(ie. popover) can be instantiated directly via HTML with lots of &lt;code&gt;data-&lt;/code&gt;
attributes that will be picked up automatically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-danger&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;focus&amp;quot;&lt;/span&gt; 
&lt;span class="na"&gt;data-toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popover&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Dismissible popover&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-placement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bottom&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;data-content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;And here&amp;#39;s some amazing content. It&amp;#39;s very engaging. Right?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or using JavaScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;popover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optionsAndCallbacks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But both can be combined so that the JavaScript options override the &lt;code&gt;data-&lt;/code&gt;
attributes. Either way, most plugins follow these techniques and &lt;strong&gt;allow
certain amount of customization&lt;/strong&gt; so that we can hook into some of it's
functionality via options and callbacks.&lt;/p&gt;
&lt;p&gt;A more extreme example would be the &lt;a href="http://fullcalendar.io/" title="A JavaScript event calendar"&gt;fullCalendar&lt;/a&gt; or the jQuery datepicker
plugins. They are in charge of rendering a rather complex DOM hierachy inside an
empty &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; you define, and everything is done through configuration.
Since the plugin is controlling some inner state you are forced to initialize it
and follow the rules it immposes.&lt;/p&gt;
&lt;p&gt;This may work for simple scenarios, but when you need more control, you'll be
forced to implement &lt;em&gt;hacky tricks&lt;/em&gt; or even roll your own solution.&lt;/p&gt;
&lt;h2 id="take-over-popovers"&gt;Take over popovers&lt;a class="headerlink" href="#take-over-popovers" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the best things about Bootstrap's widgets is that they can be represented
entirely with HTML, without the need to initialize them through JavaScript.&lt;/p&gt;
&lt;p&gt;As a follow up of the popover example, the snippet below shows how to represent
a popover widget. Notice how we can use classes like &lt;code&gt;bottom&lt;/code&gt; to specify the state
we want for this popover.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popover bottom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arrow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popover-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Popover title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popover-content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Popover content here.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, it won't be positioned, and won't be dismissed when you click somewhere
else in the page, but it can be reused as a template for your custom widget.&lt;/p&gt;
&lt;p&gt;Say we needed to take full control of a popover. I wrote a simple Backbone view
to achieve that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PopoverBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$popoverTmpl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popover bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;tabindex&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-1&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;// so that we can focus/blur&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;blur&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;remove&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've got a minimum working piece of popover that we control, but it's not
positioned. So we can make use of another library that knows how to position
elements. In this case I'll use &lt;a href="http://github.hubspot.com/tether/" title="Tether"&gt;Tether&lt;/a&gt; and modify the popover view so
that it can clean up itself before it's removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Popover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Backbone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;popoverTmpl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popover bottom fade in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;tabindex&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-1&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;blur&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;block&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tether&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tether&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;top middle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;targetAttachment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom middle&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tether&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tether&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have combined Bootstrap for presentation, Backbone for logic and Tether as
a helper for positioning elements. Live demo &lt;a href="https://jsfiddle.net/p82fsx06/1/" title="Live demo"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="wishful-thinking"&gt;Wishful thinking&lt;a class="headerlink" href="#wishful-thinking" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://youtu.be/Qkm5h4032ko" title="Pamela Fox - Beyond jQuery Widgets: JS UI Library Design"&gt;This video&lt;/a&gt; shows the process of hidding functionality and adding lots of
cruft to &lt;em&gt;jqueryfy&lt;/em&gt; a piece of code. This is exactly what we need to avoid.
More often than not I see plugins hiding their methods behind closures, when
they could be opening them as &lt;strong&gt;documented building blocks&lt;/strong&gt; to be used at your
will.&lt;/p&gt;
&lt;p&gt;It's perfectly fine if plugins expose a simple way to cover the 80% of use cases
or some basic functionality. But it's clear that pure libraries tend to
outperform ready-made plugins in terms of flexibility.&lt;/p&gt;
&lt;p&gt;If only plugins allowed a &lt;strong&gt;clear separation of UI and logic&lt;/strong&gt;, and that logic
be easily extendable, then you would be able seamlessly integrate it with the
rest of your frameworks.&lt;/p&gt;</content><category term="Programming"></category><category term="backbone"></category><category term="javascript"></category><category term="bootstrap"></category><category term="jquery"></category></entry><entry><title>The branch is dead, short live the branch!</title><link href="http://hernantz.github.io/the-branch-is-dead-short-live-the-branch.html" rel="alternate"></link><published>2015-08-28T00:00:00-03:00</published><updated>2015-08-28T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2015-08-28:/the-branch-is-dead-short-live-the-branch.html</id><summary type="html">&lt;p&gt;Implement big changesets little by little. Don't let Theseus' ship sink!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt;: When implementing big changesets, maintaining and merging long-lived
branches is hard. Use short-lived branches instead, and merge them ASAP.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The ship of Theseus" src="/images/ship.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="the-theseus-paradox"&gt;The Theseus paradox&lt;a class="headerlink" href="#the-theseus-paradox" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The ship of Theseus, also known as Theseus' paradox, is a thought experiment
that raises the question of whether an object which has had all of its 
components replaced remains fundamentally the same object."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;&lt;a href="https://en.wikipedia.org/wiki/Ship_of_Theseus" title="Ship of Theseus"&gt;Ship of Theseus&lt;/a&gt;&lt;/cite&gt;. Wikipedia.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The answer to the paradox seems to be related to how those changes are
implemented. It is easy if a large portion of the ship is replaced at once, but
it becomes more confusing if the change happens gradually, one plank at a time.&lt;/p&gt;
&lt;p&gt;On software projects, something similar occurs. There's a new requirement that
implies many changes, could be a refactor, a redesign or a new feature, that
can be implemented in small or huge stages.&lt;/p&gt;
&lt;h2 id="branches-for-all"&gt;Branches for all&lt;a class="headerlink" href="#branches-for-all" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To implement these changes, collaboratively and simultaneously with other
developers (among other advantages) is that we use a version control system,
where each feature and sub task is implemented in its own branch.&lt;/p&gt;
&lt;p&gt;Generally, every serious project also has an integration branch and a stable
branch, which may be the same &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/" title="Git Flow"&gt;or not&lt;/a&gt;. When the feature/redesign/refactor is
complete, the changes can be merged into the integration or stable branch.&lt;/p&gt;
&lt;h2 id="the-problem-with-long-lived-branches"&gt;The problem with long-lived branches&lt;a class="headerlink" href="#the-problem-with-long-lived-branches" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The strategy of not integrating a branch until it is ready can lead to some
complications, especially when working with long-lived branches, where &lt;strong&gt;these
complications become unnecessarily complicated&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Long-lived branches exist because a big changeset needs to be implemented, and
the merge is delayed for a long time until all tasks are finished.&lt;/p&gt;
&lt;p&gt;Let's review some of these complications that arise from working with
long-lived branches.&lt;/p&gt;
&lt;h3 id="1-merge-conflicts"&gt;1. Merge conflicts&lt;a class="headerlink" href="#1-merge-conflicts" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In a project with a medium-sized team, the integration branch may have a higher
refresh rate, as smaller features or bugfixes get merged, that will cause
conflicts with the long-lived branch, which gets quite often out of sync.&lt;/p&gt;
&lt;p&gt;Consider this scenario: &lt;em&gt;On a branch, some comments are added to a function.
On a second branch, the name of that function is changed and everywhere it is
invoked. On a third branch, the function declaration is moved to another file.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is an extreme example, I know, but even if you you are not &lt;strong&gt;polluting your
branches with merges&lt;/strong&gt; (in git this would mean &lt;a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing/workflow-walkthrough" title="Merging vs Rebasing"&gt;using rebase&lt;/a&gt;), and you have
managed to &lt;strong&gt;avoid the merge hell&lt;/strong&gt; that makes your branch history look like a
&lt;a href="http://www.tugberkugurlu.com/archive/resistance-against-london-tube-map-commit-history-a-k-a--git-merge-hell" title="Merge Hell"&gt;metro map&lt;/a&gt;, in general, &lt;strong&gt;solving merge conflicts is hard&lt;/strong&gt;, and the bigger
the changeset is, the trickier it gets.&lt;/p&gt;
&lt;h3 id="2-sharing-improvements-between-branches"&gt;2. Sharing improvements between branches&lt;a class="headerlink" href="#2-sharing-improvements-between-branches" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Enhancements, refactors, bugfixes and other &lt;strong&gt;improvements cannot be easily
shared between feature-branches&lt;/strong&gt; because they are WIP. Creating a common
&lt;em&gt;develop&lt;/em&gt; branch, to integrate all WIP would require having all the features
finished in order to merge it into the integration branch, and thus, defeat the
purpose of using separate branches to enable parallel work.&lt;/p&gt;
&lt;h3 id="3-quality-of-code"&gt;3. Quality of code&lt;a class="headerlink" href="#3-quality-of-code" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Long branches have to be catching up with the ever changing integration branch,
and more often than not, you'll see lots of commits with messages like: &lt;em&gt;fixing
abc, fixing more abc, revert fixing abc, WIP broken tests&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Because feature branches are &lt;em&gt;work in progress&lt;/em&gt;, documenting and testing are
left as last-minute tasks. You may think that the big messy branch will be
prevented from geting merged until it gets polished, but in reality, &lt;strong&gt;code
reviews become code overviews&lt;/strong&gt;, and big changesets just &lt;a href="https://twitter.com/iamdevloper/status/397664295875805184" title="Code reviews"&gt;look fine&lt;/a&gt;. Who
dares to approve a merge of &lt;em&gt;225 commits with 6,180 additions and 1,313
deletions that affect 112 files&lt;/em&gt;, and say it is DRY, well tested, etc?.&lt;/p&gt;
&lt;h3 id="4-big-releases"&gt;4. Big releases&lt;a class="headerlink" href="#4-big-releases" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It turns out that on personal projects and sometimes on many community driven
open-source projects, development is focused on big releases that are shipped
&lt;em&gt;when ready&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Following the analogy of the ship, this means that it won't set sail until all
the work is finished. But for startups and technology based companies, it
happens that the ship is sailing! and it cannot wait on stand-by mode until it
gets fixed, re-painted and it's oars replaced, all this must be done on the fly.&lt;/p&gt;
&lt;p&gt;All the aforementioned pain points cannot be avoided but mitigated, with enough
care and discipline, but this last one requires a mind change, committing towards
&lt;strong&gt;shipping something valuable&lt;/strong&gt; sprint by sprint. This becomes especially
important once the app is already being used because of the unpredictable
&lt;a href="http://projectcartoon.com/cartoon/1" title="How Projects Really Work"&gt;nature of software projects&lt;/a&gt;, where priorities and requirements change quite
often, and the branch could be left incomplete at any time.&lt;/p&gt;
&lt;h2 id="always-be-merging"&gt;Always. Be. Merging.&lt;a class="headerlink" href="#always-be-merging" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Coffee is for mergers&lt;/em&gt;. The quicker you merge a piece of code/feature/refactor,
the better, and for this, &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html" title="Github Flow"&gt;the simpler&lt;/a&gt; the branching model you adopt, the
better.&lt;/p&gt;
&lt;p&gt;When you plan a big changeset, dividing it into smaller tasks and start working
with the ones whom all the other tasks depend on, it's not enough. The key
thing is that &lt;strong&gt;each task that is finished has to be mergeable&lt;/strong&gt;, and this
implies that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Merge conflicts are resolved from day one.&lt;/li&gt;
&lt;li&gt;Other features, refactors and bugfixes have to deal with or can make use of
   the new (good quality? working?) code that is shipped sprint after sprint.&lt;/li&gt;
&lt;li&gt;Changes might not be tackled in the original logical order, but the
   transition towards the big changeset happens in a smooth and predictable
   manner.&lt;/li&gt;
&lt;li&gt;You avoid doing something you should &lt;a href="http://www.joelonsoftware.com/articles/fog0000000069.html" title="Things You Should Never Do, Part I"&gt;never do in software&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Despite having mentioned branches a lot, the ideas expressed here still apply,
no matter the technique used to integrate the changes. Some have gone as far as
suggest a &lt;a href="https://trunkbaseddevelopment.com/" title="Trunk Based Development"&gt;branchless trunk model&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="some-examples-of-smooth-transitions"&gt;Some examples of smooth transitions&lt;a class="headerlink" href="#some-examples-of-smooth-transitions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think I've gotten to the point already, but I felt like sharing some examples,
without getting into too much detail, of real life scenarios where requirements
are implemented by using other strategies than long-lived branches.&lt;/p&gt;
&lt;p&gt;Among all the &lt;a href="http://python3porting.com/strategies.html" title="Migration strategies"&gt;strategies available&lt;/a&gt; to &lt;strong&gt;migrate an Python app from Python 2
to Python 3&lt;/strong&gt;, I would try to modify the code so that it runs under both Python
2 and Python 3  as much as I can. I certainly wouldn't create a
&lt;em&gt;python-3-migration&lt;/em&gt; branch to do all the work there, because chances are that
your Python 2 app would still be used for a long time until the migration is
finished, and you'll have to be duplicating features, bugs and bugfixes in your
main branch and in the migration branch. The guys at Pinterest had to go through
a &lt;a href="https://engineering.pinterest.com/blog/migrating-pinterest-profiles-react" title="Migrating Pinterest profiles to React"&gt;similar experience&lt;/a&gt; but with their frontend framework.&lt;/p&gt;
&lt;p&gt;To &lt;strong&gt;translate the app&lt;/strong&gt; into another language, you can start by notifying the
entire team that translation is in progress so that each new piece of UI that is
added has the labels modified to be translatable.&lt;/p&gt;
&lt;p&gt;The customer wants &lt;strong&gt;a redesign of the site&lt;/strong&gt; (change colors and layouts), and
decides take the opportunity to also to upgrade to the latest version of
Bootstrap. Do not! Upgrade Bootstrap first and then do the redesign. But the
&lt;a href="http://slides.com/pamelafox/when-bootstrap-attacks" title="When bootstrap attacks"&gt;upgrade must live&lt;/a&gt; with the previous version for a while, so &lt;a href="http://ruby.bvision.com/blog/please-stop-embedding-bootstrap-classes-in-your-html" title="Please stop embedding Bootstrap classes in your HTML!"&gt;compile your
own version&lt;/a&gt;, merge that and then start the migration, page by page.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;renaming a class&lt;/strong&gt; that is used everywhere, is better to just create an
alias for that class and simply commit that change. From then on, make every
developer use the alias for the new code and at last, when all the codebase is
using the alias, rename the original class.&lt;/p&gt;
&lt;p&gt;Finally, you could try &lt;strong&gt;feature flags or compile time flags&lt;/strong&gt;, to &lt;a href="http://blog.travis-ci.com/2014-03-04-use-feature-flags-to-ship-changes-with-confidence/" title="Using Feature Flags to Ship Changes with Confidence"&gt;enable or
disable certain parts&lt;/a&gt; of the system depending on some conditions, but
keeping all the parts integrated in the same codebase.&lt;/p&gt;</content><category term="Programming"></category><category term="ideas"></category><category term="agile"></category><category term="git"></category></entry><entry><title>Mock yourself, not your tests</title><link href="http://hernantz.github.io/mock-yourself-not-your-tests.html" rel="alternate"></link><published>2015-07-27T00:00:00-03:00</published><updated>2015-07-27T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2015-07-27:/mock-yourself-not-your-tests.html</id><summary type="html">&lt;p&gt;Every mock is a smell, avoid them as much as you can.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt;: While sometimes mocks are needed, they should not be the first tool 
you use to write tests. It is a pity to be mocking your code when you could
be writing meaningful tests at &lt;em&gt;almost&lt;/em&gt; the same cost.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stower-titanic" src="/images/mock-yourself-not-your-tests.jpg" title="Der Untergang der Titanic by Willy Stöwer" /&gt;&lt;/p&gt;
&lt;p&gt;In this post I try to discourage the use of mocks when writing tests.
I'm not completely against them (I see their value) but it's that sometimes 
I feel like we abuse of them, just to make tests pass, feel comfortable of
seeing another green dot in our test suite and to release ourselves from the
burden of having to test our code.&lt;/p&gt;
&lt;h2 id="why-do-we-use-mocks-anyway"&gt;Why do we use mocks anyway?&lt;a class="headerlink" href="#why-do-we-use-mocks-anyway" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I'll name a few reasons that seem legit to me.&lt;/p&gt;
&lt;p&gt;One reason to use mocks is to &lt;strong&gt;force a desired state&lt;/strong&gt; for your test
and easily trigger side effects. Mocks facilitate a lot the testing of
corner cases.
Another reason is &lt;strong&gt;to gain speed&lt;/strong&gt; by staying away from slow code, like
system calls, db, network calls, costly calculations, etc. Also it could be a
short path to &lt;strong&gt;increase code coverage&lt;/strong&gt;. But probably the primary reason for
using mocks is to &lt;strong&gt;make a unit test more specific&lt;/strong&gt;. Just testing exactly
one piece of code, and thus, avoiding having to test things that (hopefully)
are already tested.&lt;/p&gt;
&lt;h3 id="testing-with-mocks"&gt;Testing with mocks&lt;a class="headerlink" href="#testing-with-mocks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let's see some example code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;invoice_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credit_card&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# more code here&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_amount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;credit_card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_credit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;credit_card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;processed&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we can see, the &lt;code&gt;process()&lt;/code&gt; method uses other objects (credit_card), called 
collaborators. If we were to write a &lt;strong&gt;unit test&lt;/strong&gt; for this method, we would 
mock all its collaborators, so that we test the codepaths involved, and 
only caring that the function calls the collaborators, nothing more. We do this, 
because we are assuming that all the collaborators work and have their own unit 
tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;calculate_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_with_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculate_amount_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;calculate_amount_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_credit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;calculate_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_without_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculate_amount_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_credit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's think for a moment if these tests we just wrote tell us, with a good
level of confidence, whether &lt;code&gt;process()&lt;/code&gt; works or not. Or are we just asserting
that some methods are called in a specific order with specific parameters. This
feels almost like testing that the compiler/interpreter works!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"We've fallen into a trap of testing that the code does what the code says 
it does, rather than testing functional behaviour we care about."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;&lt;a href="http://mauveweb.co.uk/posts/2014/09/every-mock-patch-is-a-little-smell.html"&gt;Every mock.patch() is a little smell&lt;/a&gt;&lt;/cite&gt;. Daniel Pope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This kind of unit testing makes too many assumptions on how &lt;code&gt;process()&lt;/code&gt; is
implemented. Tightly coupling your tests with mocks, causes refactors to be
painfull.  As soon as you change a detail of the implementation your tests will
&lt;em&gt;break&lt;/em&gt; (which is not the same as to &lt;em&gt;fail&lt;/em&gt;), with helpless tracebacks about
functions that were not called, or mocks that fail to be applied because some
method doesn't exist anymore, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_with_currency&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/site-packages/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="fm"&gt;__getattr__&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mock object has no attribute &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some_old_method&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another drawback I wanted to point out is that mocks tend to be too permissive, in 
the sense that they swallow errors that should occur because of a change in the 
API of the mocked object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="c1"&gt;# the old signature was: withdraw(self, amount)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If suddendly I decided to change the signature of the &lt;code&gt;withdraw()&lt;/code&gt; method, to
charge the credit card with a specific currency, the mocked tests above would
still pass successfully. They will not tell you anymore whether you have
introduced a regression bug or not!&lt;/p&gt;
&lt;p&gt;And even if you had a &lt;em&gt;real&lt;/em&gt; test for the &lt;code&gt;withdraw()&lt;/code&gt; method somewere, you
would still have to go change every test that assumed that this method worked and
did not fail.&lt;/p&gt;
&lt;p&gt;Yes, I'm aware of the &lt;code&gt;autospec=True&lt;/code&gt; param, that would restrict the mock to
just follow the object's api, making our tests a little bit less permissive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreditCard&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_autospec&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="c1"&gt;# create a mock that mimics the real CreditCard object&lt;/span&gt;
&lt;span class="n"&gt;CreditCardMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_autospec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spec_set&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;calculate_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autospec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_with_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculate_amount_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreditCardMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;calculate_amount_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_credit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;calculate_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autospec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_without_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculate_amount_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreditCardMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_credit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withdraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or we could have gone a little bit further, and inject a double to our
&lt;code&gt;process()&lt;/code&gt; function, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FakeCreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Replace our CreditCard with a double to avoid hitting the db or&lt;/span&gt;
&lt;span class="sd"&gt;    3rd party services (if any).&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is also an interesting strategy, but, now you'll have to be maintaining
this double by hand, every time you real object is updated.&lt;/p&gt;
&lt;p&gt;Let's try a completely different approach and see if we can do any better.&lt;/p&gt;
&lt;h3 id="testing-without-mocks"&gt;Testing without mocks&lt;a class="headerlink" href="#testing-without-mocks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now, how would I test this, without mocks?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myfactories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CreditCardFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InvoiceFactory&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_with_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;InvoiceFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreditCardFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_without_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;InvoiceFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreditCardFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comparing the test above, with the one that uses mocks, we can see that it has 
almost the same amount of code, but this test is not bound to the implementation, 
it is still deterministic, plus it tests goals in an automated way, similar to 
the manual check I would do to trust that the &lt;code&gt;process()&lt;/code&gt; method works.&lt;/p&gt;
&lt;p&gt;We have used two techniques here that helped us get way from mocks.&lt;/p&gt;
&lt;p&gt;The first technique was to start testing how collaborators interact between
each other inside &lt;code&gt;process()&lt;/code&gt;. These type of tests are called &lt;strong&gt;integration
tests&lt;/strong&gt;, that test larger units of your code, with real components. This also 
helped reducing the chance of bugs that sneak away when you test units in 
isolation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note&lt;/em&gt;: Keep a reasonable amount of code under your tests. While writing
tests for very small units of code might be adding noise to your test suite,
there won't be too much value in testing a huge portion of your code either.&lt;/p&gt;
&lt;p&gt;The second technique consisted in using factories. I mention this, because we
(lazy developers) often use mocks as a quick solution to creating the complex
conditions.&lt;/p&gt;
&lt;p&gt;What's important is that factories &lt;strong&gt;build real objects&lt;/strong&gt; for you in a
declarative and straighforward way, which let's you focus on the bits of data
you need to setup your test and leave the rest for the factory to implement.&lt;/p&gt;
&lt;h2 id="in-the-quest-for-real-mocks"&gt;In the quest for &lt;em&gt;real mocks&lt;/em&gt;&lt;a class="headerlink" href="#in-the-quest-for-real-mocks" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Alright! This is looking better, but does this mean that we can get rid of
mocks once for all? Nope.&lt;/p&gt;
&lt;p&gt;There are cases where it really makes sense to use mocks. I'll show you a couple
of examples that, in my opinion, could serve as inspiration to use them
successfully and write better tests. These mocks are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Agnostic&lt;/strong&gt;: the details of your code change, but your mocks continue to work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swappable&lt;/strong&gt;: you can easily turn them on/off or switch to them on the fly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Precise&lt;/strong&gt;: they stub only the sensible parts of the real object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verified&lt;/strong&gt;: the interfaces of such mock are carefully maintained and mimic the
  real object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="example-1-a-verified-mock"&gt;Example 1: A verified mock&lt;a class="headerlink" href="#example-1-a-verified-mock" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django gives us an in-memory mailbox that captures all outgoing emails. What's 
interesting is that it sets up this dummy double  &lt;strong&gt;by default&lt;/strong&gt; when you 
inherit from &lt;code&gt;TestCase&lt;/code&gt;, so writing these kind of tests becomes really easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_with_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# this factory will create an Invoice and a User associated to &lt;/span&gt;
        &lt;span class="c1"&gt;# it, with the specified email&lt;/span&gt;
        &lt;span class="n"&gt;InvoiceFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user__email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo@bar.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code &lt;/span&gt;

        &lt;span class="c1"&gt;# Test that payment receipt email has been sent.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outbox&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outbox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo@bar.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you might be thinking that I'm contradicting myself with this example,
since no email is really being sent.&lt;/p&gt;
&lt;p&gt;That is a valid concern, but, provided that in my code, I interact with an
abstraction a framework gives us for sending emails, and that behind the scenes
it is replacing the real email machinery with a double that mimics that
behaviour, I believe I can still make assertions about my code that are &lt;em&gt;good
enough&lt;/em&gt; (even though no mail is sent). That framework is responsible for
providing us with a good &lt;em&gt;verified&lt;/em&gt; stub.&lt;/p&gt;
&lt;h3 id="example-2-an-agnostic-mock"&gt;Example 2: An agnostic mock&lt;a class="headerlink" href="#example-2-an-agnostic-mock" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Say for example that you need to hit a 3rd party API that you don't own, that
probably has throttle limitations, no sandbox/testing ground, you cannot setup
and run it locally, or all these together. Doing live testing is not really an
option. But if you use something like &lt;a href="https://github.com/kevin1024/vcrpy"&gt;vrc.py&lt;/a&gt;, then you profit from testing
against real requests/responses that are recorded, so that next time you run the
test suite it runs under safe and repeatable conditions, without hitting the net.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; 
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;vcr&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@vcr.use_cassette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stripe_responses/cc_with_credit.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_with_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code&lt;/span&gt;

    &lt;span class="nd"&gt;@vcr.use_cassette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stripe_responses/cc_without_credit.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_cc_without_credit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the 3rd party API changes, you don't have to do anything but delete the
recorded responses, and your test will do all the work for you, updating the
test cases with the new responses.
Should you need more control over a certain response that is not easy to 
reproduce, (like a 500 error response), you can achieve that with &lt;a href="https://github.com/gabrielfalcao/HTTPretty"&gt;httpretty&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;httpretty&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@httpretty.activate&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_process_handles_failure_from_stripe&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;httpretty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpretty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://api.stripe.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;success&amp;quot;: false}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I consider httpretty and vcr.py to be good examples of &lt;em&gt;agnostic&lt;/em&gt; mocks, since
they can be used no matter which network library you are using.&lt;/p&gt;
&lt;h3 id="example-3-a-precise-mock"&gt;Example 3: A precise mock&lt;a class="headerlink" href="#example-3-a-precise-mock" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you need to test code that deals with dates, mocks will be very handy
too. Let's see an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test this, you would have to write tests that have almost the same code you
are trying to test, and, depending on how precise the dates you are handling
are, &lt;strong&gt;your tests could fail from time to time&lt;/strong&gt;, ie: some tests might fail
when you run them at midnight, or fail because of a difference of one
millisecond.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_payment_date_is_saved&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code&lt;/span&gt;
        &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# this won&amp;#39;t work&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when we test using the &lt;a href="https://github.com/spulec/freezegun"&gt;freezegun&lt;/a&gt; module, we can ditch the &lt;em&gt;mock
everything&lt;/em&gt; strategy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;freezegun&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;freeze_time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PaymentTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_payment_date_is_saved&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;freeze_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2012-01-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2012-01-02&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see how we avoided mocking &lt;code&gt;datetime.now()&lt;/code&gt; and we how we can even use
&lt;code&gt;strftime()&lt;/code&gt; in our tests. Because freezegun is &lt;em&gt;precise&lt;/em&gt;, it only mocks
datetime functions that are used to obtain the current time, and leaves
everything else untouched. We made time behave deterministically using a nice
declarative API, that doesn't get in our way. We can even calculate the payment
date using other libraries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;arrow&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... more code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Our test still passes :)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="need-for-speed"&gt;Need for speed&lt;a class="headerlink" href="#need-for-speed" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I mentioned that using mocks was a legit excuse for speeding your tests, and
staying away from slow parts like the database. Well if you used an ORM and your
data structures are pretty standard, then you may be able to &lt;a href="http://www.machinalis.com/blog/optimizing-your-tests-in-django/"&gt;switch to an
in-memory sqlite database&lt;/a&gt; just to run your tests.&lt;/p&gt;
&lt;p&gt;Another possibility that's worth exploring, but I haven't tried myself though,
is to &lt;a href="https://gist.github.com/zekefast/07fa5434afcd0ba77f9b" title="Run postgresql in a ram disk"&gt;mount the database&lt;/a&gt; in a &lt;code&gt;tmpfs&lt;/code&gt; filesystem, or combine that with a
&lt;a href="https://github.com/gentics/docker-tmpfs-mysql" title="Docker tmpfs mysql"&gt;custom docker build&lt;/a&gt; to gain speed, but at the same time, run the tests
against the db engine you use in production, and thus, gain also reliability.&lt;/p&gt;
&lt;p&gt;In case you don't want to mess with custom setups for testing, there are some
easy tricks to speed your tests like running them in parallel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nosetests --processes&lt;span class="o"&gt;=&lt;/span&gt;NUM
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;provided that your tests &lt;a href="http://nose.readthedocs.org/en/latest/plugins/multiprocess.html#beware"&gt;can run concurrently&lt;/a&gt; and are IO bound, or simply
&lt;a href="https://twitter.com/df07/status/607562584401821696"&gt;throw hardware at the problem&lt;/a&gt; with more RAM, a more powerful CPU or an
SSD.&lt;/p&gt;
&lt;h2 id="in-conclusion"&gt;In conclusion&lt;a class="headerlink" href="#in-conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Integration tests are one honking great idea, let's do more of those. Don't 
  rely exclusively in unit tests, test goals.&lt;/li&gt;
&lt;li&gt;Use factories to reduce boilerplate of tests setup and asserting a known state
  before they run.&lt;/li&gt;
&lt;li&gt;Avoid using mocks as much as you can. There's a good chance you'll be testing 
  what the code does, not what it should do.&lt;/li&gt;
&lt;li&gt;In times of need, apply well maintained global mocks, the closest possible to 
  the danger zone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mock yourself not your tests :P&lt;/p&gt;</content><category term="Programming"></category><category term="testing"></category><category term="python"></category><category term="mocks"></category><category term="rants"></category></entry><entry><title>Air, the next big thing</title><link href="http://hernantz.github.io/air-the-next-big-thing.html" rel="alternate"></link><published>2015-04-27T00:00:00-03:00</published><updated>2015-04-27T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2015-04-27:/air-the-next-big-thing.html</id><summary type="html">&lt;p&gt;What is wrong with &lt;em&gt;some&lt;/em&gt; startups today?&lt;/p&gt;</summary><content type="html">&lt;p&gt;What is wrong with &lt;em&gt;some&lt;/em&gt; startups today?&lt;/p&gt;
&lt;p&gt;Slack is &lt;a href="http://blogs.wsj.com/digits/2014/10/31/one-year-old-business-software-maker-slack-valued-at-1-12-billion/"&gt;valuated at $1.12b&lt;/a&gt;.
While freenode hosts ~55846 chat rooms and ~89238 users, or even when
&lt;a href="http://getkaiwa.com/"&gt;this kind of software&lt;/a&gt; is available for free and you can move your 
entire team there, as you did when you moved to Slack.
It's not like Twitter or Youtube where you have a comunity around the
service and it's kind of unlikely there would be a massive migration to
other service.
In Slack, the number of users doesn't matter, because is a team
communication tool, and as soon as the team decides to move elsewhere,
Slack is dead.&lt;/p&gt;
&lt;p&gt;I give you another example. Docker, &lt;a href="http://www.bloomberg.com/news/articles/2015-04-14/docker-said-to-join-1-billion-valuation-club-with-new-funding"&gt;said to be valuated at $1b&lt;/a&gt;. 
Provides an open source tool on top other open source tool, which 
apparently &lt;a href="http://chimeracoder.github.io/docker-without-docker/#1"&gt;is not even needed now&lt;/a&gt;, thanks to the systemd guys.
Even if Docker tries to provide a web platform, similar to what GitHub 
does for git, does that really justifies $1b valuation?&lt;/p&gt;
&lt;p&gt;Ladies and gentlemen I'm here to sell you air.
A product everyone needs. We currently have 7 billion active users and
growing. Nobody is paying for it yet, but this userbase's got to worth
something, plus we have no competitors.
Sign up now on our &lt;a href="http://everyfuckingwebsite.com/"&gt;website&lt;/a&gt; and connect with your friends!&lt;/p&gt;</content><category term="Startups"></category><category term="startups"></category><category term="rants"></category></entry><entry><title>How to publish a pelican site on Github</title><link href="http://hernantz.github.io/how-to-publish-a-pelican-site-on-github.html" rel="alternate"></link><published>2014-05-18T00:00:00-03:00</published><updated>2014-05-18T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2014-05-18:/how-to-publish-a-pelican-site-on-github.html</id><summary type="html">&lt;p&gt;Step by step guide on how to publish a pelican website on Github.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Pelican a static site publishing tool" src="/images/pelican-a-static-site-publishing-tool-github.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is a step by step guide on how to publish a pelican website on Github, and
how not to get the site's codebase so tightly coupled to where it is deployed.
If in the future we want to publish it somewhere else, there isn't much to be
changed. Another thing to mention is that even though we reference pelican
here, the process I'll show you can be applied to almost any static site
generator tool.&lt;/p&gt;
&lt;p&gt;1) Create a repository in Github following this exact naming convention:
&lt;code&gt;username.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2) &lt;a href="http://docs.getpelican.com/en/latest/install.html#kickstart-your-site"&gt;Setup your pelican site&lt;/a&gt; on a separate repository, ie my-blog, and
&lt;a href="http://docs.getpelican.com/en/latest/content.html#writing-content"&gt;start adding content&lt;/a&gt; to it. You'll notice that the generated output goes
by default to a folder (conveniently) named &lt;em&gt;output&lt;/em&gt;, but it can be changed to
something else with the &lt;code&gt;OUTPUT_PATH&lt;/code&gt; setting in your &lt;code&gt;pelicanconf.py&lt;/code&gt; file&lt;/p&gt;
&lt;p&gt;3) We will make use of &lt;em&gt;git submodules&lt;/em&gt; to point our output directory to the
repo created in step 1, so that it holds what's going to be published in Github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add https://github.com/username/username.github.io.git output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding a git submodule will create another version controlled file called
&lt;code&gt;.gitmodules&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[submodule &amp;quot;output&amp;quot;]&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;output&lt;/span&gt;
&lt;span class="s"&gt;    url = https://github.com/username/username.github.io.git&lt;/span&gt;
&lt;span class="s"&gt;    ignore = all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the output directory is now managed by the independant git repository
from step 1, we don't want to have to version-control it again from our pelican
site repo, and that's why we added the last &lt;em&gt;ignore&lt;/em&gt; statement.&lt;/p&gt;
&lt;p&gt;4) Pelican has two types of configuration files, &lt;code&gt;pelicanconf.py&lt;/code&gt; for general
settings, and &lt;code&gt;publishconf.py&lt;/code&gt; that is used for publishing, as you probably
guessed. Pelican's Makefile comes with a built-in command to generate the
output that will be published:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make publish  &lt;span class="c1"&gt;# generates output using publishconf.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But before running it, make sure the following settings are in &lt;code&gt;publishconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# don&amp;#39;t delete our .git submodule dir&lt;/span&gt;
&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# use the correct abs url&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://username.github.io&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Heads up!&lt;/strong&gt; Pelican regenerates the output automatically when running the http
server and making changes to the contents. So &lt;code&gt;make publish&lt;/code&gt; should be the last
command to be run before releasing.&lt;/p&gt;
&lt;p&gt;5) Now every time you regenerate your site contents and want to publish them, cd
to your output directory and run git commands (like add, commit, push, etc).
Those commands will only take effect on your repo from step 1, because you are
inside the output submodule. Once you push your new output content to your master
branch of &lt;code&gt;username.github.io&lt;/code&gt;, Github will take some minutes to update your site.
And that's it.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;</content><category term="Programming"></category><category term="pelican"></category><category term="git"></category><category term="python"></category></entry><entry><title>An MVP is not a product, it's an MVP</title><link href="http://hernantz.github.io/an-mvp-is-not-a-product-its-an-mvp.html" rel="alternate"></link><published>2013-11-09T00:00:00-03:00</published><updated>2013-11-09T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2013-11-09:/an-mvp-is-not-a-product-its-an-mvp.html</id><summary type="html">&lt;p&gt;Build, measure and learn. But don't avoid best practices afterwards.&lt;/p&gt;</summary><content type="html">&lt;p&gt;tl;dr: Build, measure and learn. But don't avoid best practices afterwards.&lt;/p&gt;
&lt;p&gt;Minimum Viable Product, or even better Minimum Viable Prototype (MVP from now
on), is a technique born in the Lean Startup movement to reduce the risk of
gaining validated learning, without spending too much effort, money and time in
the wrong project direction.&lt;/p&gt;
&lt;p&gt;You build a MVP to validate an idea, be it for a brand new product or a new
feature in an existing one.
In this stage of the project you don't care about: tests, QA, copy-pasting code,
mocking the UI, security, code reviews, maintainability, scalability, etc.&lt;/p&gt;
&lt;p&gt;In case this prototype is successful, you should go and build the product or
the feature to capitalize that validated learning, but this time, following
the industry's best practices, so it can be used in production by your
(paying?) users.&lt;/p&gt;
&lt;p&gt;This last step is crucial. There will be the temptation of not taking it.
The consequences of not doing it are well known, that's why we have best
practices afterall.
The risk is low now. Money, time and effort won't be wasted. There is no excuse.
An MVP is not a product, it's an MVP.&lt;/p&gt;</content><category term="Startups"></category><category term="rants"></category><category term="mvp"></category></entry><entry><title>Open tabs buffer overflow</title><link href="http://hernantz.github.io/open-tabs-buffer-overflow.html" rel="alternate"></link><published>2013-08-21T00:00:00-03:00</published><updated>2013-08-21T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2013-08-21:/open-tabs-buffer-overflow.html</id><summary type="html">&lt;p&gt;Ideas for surviving an open tabs buffer overflow.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Bored Elon Musk knows" src="/images/genius-is-1-inspiration-and-99-closing-the-two-hundred-open-tabs-in-your-browser.png" /&gt;&lt;/p&gt;
&lt;h2 id="the-interwebs-and-the-power-it-holds"&gt;The interwebs and the power it holds&lt;a class="headerlink" href="#the-interwebs-and-the-power-it-holds" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is so much out there and just a click of distance. Funny videos, new
music, interesting articles, tutorials, blog posts, games.&lt;/p&gt;
&lt;p&gt;So now I have lots of open tabs that I would like to close some day but there is
always new content that keeps being added to my information processing buffer
AKA open tabs buffer.&lt;/p&gt;
&lt;h2 id="why-do-i-even-check-reddithackernews"&gt;Why do I even check reddit/hackernews?&lt;a class="headerlink" href="#why-do-i-even-check-reddithackernews" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Partly becouse it's addictive. Small dosis of information of stuff I like,
injected right to my brain. But mostly it's becouse this way, I feel less guilty
about procrastinating.&lt;/p&gt;
&lt;h2 id="ideas-for-surviving-an-open-tabs-buffer-overflow"&gt;Ideas for surviving an open tabs buffer overflow.&lt;a class="headerlink" href="#ideas-for-surviving-an-open-tabs-buffer-overflow" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Triage" title="Triage mode"&gt;Triage mode&lt;/a&gt; for new content, is my current approach. If I find something 
that could be benefitial at some point, I throw it in the bookmarks limbo 
(that place where goes everything I will never read), and I feel released that 
it is in a safe place, and eventually I will read it.&lt;/p&gt;
&lt;p&gt;Also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't check for rss/newsletters/twitter/hackernews/reddit. You don't really 
  need them, trust me.&lt;/li&gt;
&lt;li&gt;Fresh start. Don't reopen last tabs every session.  This will help you forget 
  what wasn't important when you open the browser and read what is important before 
  closing the browser.&lt;/li&gt;
&lt;li&gt;Limit the number of browser tabs with a plugin.&lt;/li&gt;
&lt;li&gt;Use a read-it-later diggesting tool (like &lt;a href="http://getpocket.com/"&gt;Pocket&lt;/a&gt;), which also removes the 
  comments and ads cutter from your read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="update-2016-04-03"&gt;Update 2016-04-03&lt;a class="headerlink" href="#update-2016-04-03" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So far my biggest improvements have come from the read-it-later solution, mainly
because I can tag articles to easily find later like: &lt;code&gt;server&lt;/code&gt; (for server setup
and sysadmin tasks), &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;uix&lt;/code&gt; (for ui/ux), &lt;code&gt;management&lt;/code&gt; (everything
related to managing projects/people), among others. The hardest part here is to
remember that you once saved something interesting for later read.&lt;/p&gt;
&lt;p&gt;The other improvement has been to stop using the desktop to browse twitter.
Instead I force myself to read it on a tablet, which is not so distracting and
at the same time helps with the &lt;em&gt;triage process&lt;/em&gt; since it is somewhat cumbersome
to multitask on it.&lt;/p&gt;</content><category term="Productivity"></category><category term="ideas"></category></entry><entry><title>Init</title><link href="http://hernantz.github.io/init.html" rel="alternate"></link><published>2013-07-03T00:00:00-03:00</published><updated>2013-07-03T00:00:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2013-07-03:/init.html</id><summary type="html">&lt;p&gt;This is my new static blog.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Everyone's unwritten work is brilliant. And the more unwritten it is, the more brilliant it is.
We have all met those glib, intimidating graduate students or faculty members. They are at their
most dangerous holding a beer in one hand and a cigarette in the other, in some bar or at an
office party. They have all the answers. They can tell you just what they will write about, and
how great it will be.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt; ― Michael C. Munger, &lt;a href="https://las.ucsd.edu/_files/graduate/10tipsonwritinglessbadly2010"&gt;10 Tips on How to Write Less Badly&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is my static new blog and it begins with this single post. I hope this is
not one of those things I start and abandon.&lt;/p&gt;
&lt;p&gt;Why now? Because in the last weeks I felt the urge to write for myself.
Knowing my thoughts will be publicly available forces me to think wisely, 
and arrive to better conclusions, inpired by &lt;a href="http://getnashty.com/write-less"&gt;this&lt;/a&gt; and &lt;a href="http://www.paulgraham.com/writing44.html" title="Writing,  Briefly"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, until now didn't like any of the blogging platforms out there,
but now with &lt;a href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt;, being able to craft my own posts with markdown and
vim has become part of the motivation too.&lt;/p&gt;</content><category term="Personal"></category><category term="pelican"></category><category term="ideas"></category></entry></feed>