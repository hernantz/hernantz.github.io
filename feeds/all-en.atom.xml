<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>what's the point</title><link href="http://hernantz.github.io/" rel="alternate"></link><link href="http://hernantz.github.io/feeds/all-en.atom.xml" rel="self"></link><id>http://hernantz.github.io/</id><updated>2014-05-18T17:50:00-03:00</updated><entry><title>How to publish a pelican site on Github</title><link href="http://hernantz.github.io/how-to-publish-a-pelican-site-on-github.html" rel="alternate"></link><updated>2014-05-18T17:50:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2014-05-18:how-to-publish-a-pelican-site-on-github.html</id><summary type="html">&lt;p&gt;&lt;img alt="Pelican a static site publishing tool" src="/images/pelican-a-static-site-publishing-tool-github.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is a step by step guide on how to publish a pelican website on Github, and how not to get the site's
codebase so tightly coupled to where it is deployed. If in the future we want to publish it somewhere else
there isn't much to be changed. Another thing to mention is that even though we
reference pelican here, this process can be applied to almost any static site
generator tool.&lt;/p&gt;
&lt;p&gt;1) Create a repository in github with exactly the following naming convention:
&lt;code&gt;your-github-username.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2) &lt;a href="http://docs.getpelican.com/en/latest/install.html#kickstart-your-site"&gt;Setup your pelican site&lt;/a&gt; 
on a separate repository, ie my-blog, and &lt;a href="http://docs.getpelican.com/en/latest/content.html#writing-content"&gt;start adding content&lt;/a&gt; to it.
You'll notice that the generated output goes by default to a folder (conveniently) named &lt;code&gt;output&lt;/code&gt;,
but it can be changed to something else with the setting &lt;code&gt;OUTPUT_PATH&lt;/code&gt; in your &lt;code&gt;pelicanconf.py&lt;/code&gt; file&lt;/p&gt;
&lt;p&gt;3) We will make use of "git submodules" to point our output directory to the 
repo created in step 1, so that it holds what's going to be published in github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add https://github.com/username/username.github.io.git output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding a git submodule will create another version controlled file called &lt;code&gt;.gitmodules&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[submodule &amp;quot;output&amp;quot;]&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;output&lt;/span&gt;
&lt;span class="s"&gt;    url = https://github.com/username/username.github.io.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4) As the output directory is now managed by the independant git repository from step 1, we don't want to have to version-control 
it again from our pelican site repo. To ignore it just add a &lt;code&gt;ignore&lt;/code&gt; statement like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[submodule &amp;quot;output&amp;quot;]&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;output&lt;/span&gt;
&lt;span class="s"&gt;    url = https://github.com/username/username.github.io.git&lt;/span&gt;
&lt;span class="s"&gt;    ignore = all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5) Now every time you regenerate you site contents and want to publish them, cd to your output directory
and run git commands (like add, commit, push, etc) that will only take effect on your repo from step 1. Once you 
push your new output content to your master branch of &lt;code&gt;your-github-username.github.io&lt;/code&gt;, Github will take 
some minutes to update your site.&lt;/p&gt;
&lt;p&gt;Fin.&lt;/p&gt;</summary><category term="pelican"></category><category term="git"></category></entry><entry><title>Fixing VirtualBox VT-X or AMD-V is not available</title><link href="http://hernantz.github.io/fixing-virtualbox-vt-x-or-amd-v-is-not-available.html" rel="alternate"></link><updated>2014-04-10T22:36:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2014-04-10:fixing-virtualbox-vt-x-or-amd-v-is-not-available.html</id><summary type="html">&lt;p&gt;This warning/error started to appear in VirtualBox v4.3, where using Intel's
VT-X and AMD's AMD-V native virtualization technologies is set to enabled by
default on every VM. You computer may or may not have these goodies.&lt;/p&gt;
&lt;p&gt;Check the output of these commands to verify this in case you are not sure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;grep --color vmx /proc/cpuinfo  &lt;span class="c"&gt;## for an Intel processor&lt;/span&gt;
grep --color svm /proc/cpuinfo  &lt;span class="c"&gt;## for an AMD processor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case you have support for VT-x or AMD-v, you will see an option to enable
the virtualization in the BIOS, and after doing that the problem is solved.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Enable virtualization in BIOS" src="/images/BIOS-enable-virtualization.png" /&gt;&lt;/p&gt;
&lt;p&gt;In case you do not have support for VT-x or AMD-v, you can disable that feature.
The configuration file for your VM is in &lt;code&gt;/path/to/vm/files/myvmname/myvmname.vbox&lt;/code&gt;
(where myvmname is your VM name n_n).&lt;/p&gt;
&lt;p&gt;It is an xml, but it states that you should not modify it directly becouse
changes won't take effect, so we have to use other tools, such as the VirtualBox
UI or VBoxManage.  As that option didn't appear in the UI, I had to go with the
VBoxManage command line tool. To disable Hardware Virtualization I run the
following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VBoxManage modifyvm myvmname --hwvirtex off
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case you run more configuration problems and your current virtualbox ui does
not display, just check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VBoxManage --help &lt;span class="p"&gt;|&lt;/span&gt; less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and for sure you will be able to configure almost anything.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-BIOS image taken from: &lt;a href="http://askubuntu.com/a/256853"&gt;http://askubuntu.com/a/256853&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="virtualization"></category><category term="virtualbox"></category></entry><entry><title>An MVP is not a product, it's an MVP</title><link href="http://hernantz.github.io/an-mvp-is-not-a-product-its-an-mvp.html" rel="alternate"></link><updated>2013-11-09T12:03:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2013-11-09:an-mvp-is-not-a-product-its-an-mvp.html</id><summary type="html">&lt;p&gt;Minimum Viable Product, or even better Minimum Viable Prototype (MVP from now on),
is a technique born in the Lean Startup movement to reduce the risk of gaining validated
learning, without spending too much effort, money and time in the wrong project direction.&lt;/p&gt;
&lt;p&gt;You build a MVP to validate an idea, be it for a brand new product or a new feature 
in an existing one. 
In this stage of the project you don't care about: tests, QA, copy-pasting code, 
mocking the UI, security, code reviews, maintainability, scalability, etc.&lt;/p&gt;
&lt;p&gt;In case this prototype is successfull, you should go and build the product or the feature to 
capitalize that validated learning, but this time, following industries best practices, 
so it can be used in production by your (paying?) users.&lt;/p&gt;
&lt;p&gt;This last step is crucial. There will be the tempatation of not taking it.
The consequences of not doing it are well known, that's why we have best practices afterall.
The risk is low now. Money, time and effort won't be wasted. There is no excuse. 
An MVP is not a product, it's an MVP.&lt;/p&gt;</summary><category term="startups"></category></entry><entry><title>Open tabs buffer overflow</title><link href="http://hernantz.github.io/open-tabs-buffer-overflow.html" rel="alternate"></link><updated>2013-08-21T22:56:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2013-08-21:open-tabs-buffer-overflow.html</id><summary type="html">&lt;p&gt;&lt;img alt="Bored Elon Musk knows" src="/images/genius-is-1-inspiration-and-99-closing-the-two-hundred-open-tabs-in-your-browser.png" /&gt;&lt;/p&gt;
&lt;h2&gt;The interwebs and the power it holds&lt;/h2&gt;
&lt;p&gt;There is so much out there and just a click of distance.  Fun videos, new music,
interesting articles, tutorials, blog posts, games.&lt;/p&gt;
&lt;p&gt;So now I have lots of open tabs that I would like to close some day but there is
always new content that keeps being added to my information processing buffer
AKA open tabs buffer.&lt;/p&gt;
&lt;h2&gt;Why do I even check reddit/hackernews?&lt;/h2&gt;
&lt;p&gt;Partly becouse it's addictive. Small dosis of information of stuff I like,
injected right to my brain. But mostly it's becouse this way, I feel less guilty
about procrastinating.&lt;/p&gt;
&lt;h2&gt;Ideas for surviving an open tabs buffer overflow.&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Triage" title="Triage mode"&gt;Triage mode&lt;/a&gt; for new content, is my current approach. If I find something 
that could be benefitial at some point, I throw it in the bookmarks limbo 
(that place where goes everything I will never read), and I feel released that 
it is in a safe place, and eventually I will read it.&lt;/p&gt;
&lt;p&gt;Also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't check for rss/newsletters/twitter/hackernews/reddit. You don't really 
  need them, trust me.&lt;/li&gt;
&lt;li&gt;Fresh start. Don't reopen last tabs every session.  This will help you forget 
  what wasn't important when you open the browser and read what is important before 
  closing the browser.&lt;/li&gt;
&lt;li&gt;Limit the number of browser tabs with a plugin.&lt;/li&gt;
&lt;li&gt;Use a read-it-later diggesting tool (like &lt;a href="http://getpocket.com/"&gt;Pocket&lt;/a&gt;), which also removes the 
  comments and ads cutter from your read.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="productivity"></category><category term="ideas"></category></entry><entry><title>Init</title><link href="http://hernantz.github.io/init.html" rel="alternate"></link><updated>2013-07-03T18:06:00-03:00</updated><author><name>hernantz</name></author><id>tag:hernantz.github.io,2013-07-03:init.html</id><summary type="html">&lt;p&gt;This is my not-sexy static new blog. It starts with a single post and a single
blog. I hope this is not one of those things I start and abandon.&lt;/p&gt;
&lt;p&gt;Why now? Becouse in the last weeks I felt the urge to write for myself. 
Knowing my thoughts will be publicly available forces me to think wisely, 
and arrive to better conclusions. 
Aditionally, until now didn't like any of the blogging platforms out there, 
but now with pelican, being able to craft my own posts with markdown and vim
is also part of the motivation.&lt;/p&gt;
&lt;p&gt;In this blog, I do my best to get to the point. Quality over quantity.
Why write a thousand words if a picture says more than a thousand words?
Why write six paragraphs if you can fit an introduction, main idea
and conclusion in just three?&lt;/p&gt;
&lt;p&gt;Life is short, &lt;a href="http://getnashty.com/write-less"&gt;write less&lt;/a&gt;, read this and move on.&lt;/p&gt;
&lt;p&gt;P.S. Sorry for the length of this post. I didn't have time to make it shorter.&lt;/p&gt;</summary><category term="pelican"></category><category term="personal"></category></entry></feed>